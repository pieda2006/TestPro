package javax.servlet;
public class Htbbsf{
public void writeHtbbsf(int n,String filepath,String kind, String fileDir){
try{
WriteCSV writeFile = new WriteCSV(filepath + "htbbs" + n + ".jsp");
writeFile.writeString("<%");
writeFile.writeString("/**");
writeFile.writeString(" * Hello JSP BBS F ver 1.0");
writeFile.writeString(" * Copyright(C) Hirokazu Tanaka 2002-2003 All rights reserved.");
writeFile.writeString(" * E-MAIL : hiro@hellohiro.com");
writeFile.writeString(" * WWW : http://www.hellohiro.com/");
writeFile.writeString(" *");
writeFile.writeString(" * [必須ライブラリ]");
writeFile.writeString(" * 「Hello ファイルアップロードライブラリ」が必要になります。WEB-INF/libフォルダに");
writeFile.writeString(" * 「fileupload.jar」ファイルを置いてください。");
writeFile.writeString(" *");
writeFile.writeString(" */");
writeFile.writeString("%>");
writeFile.writeString("<%@ page contentType=\"text/html; charset=shift-jis\" %>");
writeFile.writeString("<%@ page import=\"java.awt.*,java.util.*,java.io.*,java.net.*,java.text.*,com.hellohiro.servlet.upload.*,javax.servlet.http.*\" %>");
writeFile.writeString("<%");
writeFile.writeString("/***************");
writeFile.writeString("*** 基本設定始 **");
writeFile.writeString("****************/");
writeFile.writeString("");

writeFile.writeString("String uri_name = request.getRequestURI().split(\"/\",0)[2];");
writeFile.writeString("ClassDefine ClassDefine = new ClassDefine();");
writeFile.writeString("ClassDefine.topic_info = ClassDefine.topic_info + \"_\" + uri_name;");
writeFile.writeString("ClassDefine.next_id = ClassDefine.next_id + \"_\" + uri_name;");
writeFile.writeString("ClassDefine.user_info = ClassDefine.user_info + \"_\" + uri_name;");
writeFile.writeString("ClassDefine.topic_kind = ClassDefine.topic_kind + \"_\" + uri_name;");
writeFile.writeString("ClassDefine.topic_state = ClassDefine.topic_state + \"_\" + uri_name;");
writeFile.writeString("ClassDefine.lock_table = ClassDefine.lock_table + \"_\" + uri_name;");
writeFile.writeString("ClassDefine.topic_plan = ClassDefine.topic_plan + \"_\" + uri_name;");
writeFile.writeString("ClassDefine.topic_report = ClassDefine.topic_report + \"_\" + uri_name;");
writeFile.writeString("ClassDefine.query = ClassDefine.query + \"_\" + uri_name;");
writeFile.writeString("ClassDefine.userpass = ClassDefine.userpass + \"_\" + uri_name;");
writeFile.writeString("ClassDefine.tag = ClassDefine.tag + \"_\" + uri_name;");
writeFile.writeString("ClassDefine.file_dir = ClassDefine.file_dir_part1 + uri_name + ClassDefine.file_dir_part2;");
writeFile.writeString("ClassDefine.bbs_dir = ClassDefine.bbs_dir_part1 + uri_name + ClassDefine.bbs_dir_part2;");
writeFile.writeString("ClassDefine.bbs_htbbs_dir = ClassDefine.bbs_htbbs_dir_part1 + uri_name + ClassDefine.bbs_htbbs_dir_part2;");
writeFile.writeString("ClassDefine.file_htbbs_dir = ClassDefine.file_htbbs_dir_part1 + uri_name + ClassDefine.file_htbbs_dir_part2;");
writeFile.writeString("%>");
writeFile.writeString("<%!");
writeFile.writeString("private static final String BG_COLOR       = \"#DEF1FA\"; // 背景色");
writeFile.writeString("private static final String TEXT_COLOR     = \"#467AE6\"; // テキストの色");
writeFile.writeString("private static final String SUBJECT_COLOR  = \"#467AE6\"; // 記事の題名の色");
writeFile.writeString("private static final String TEXT_POINT     = \"10pt\"; // 本文の文字のサイズ");
writeFile.writeString("private static final String TEXT_HIGHT     = \"12pt\"; // 本文の文字の高さ");
writeFile.writeString("");
writeFile.writeString("private static final String LINK_COLOR     = \"#3333DD\"; // リンク");
writeFile.writeString("private static final String VLINK_COLOR    = \"#DD3333\"; // 訪問済みリンク");
writeFile.writeString("private static final String HLINK_COLOR    = \"#FF0000\"; // マウスホーバーリンク");
writeFile.writeString("private static final String ALINK_COLOR    = \"#FF0000\"; // アクティブリンク");
writeFile.writeString("");
writeFile.writeString("private static final boolean USE_IMG       = false; // タイトルに画像を使う：true　使わない：false");
writeFile.writeString("private static final String IMG_PATH       = \"./title.gif\"; // タイトルに画像を使う場合の画像のパス");
writeFile.writeString("private static final String TITLE          = \"" + n + "\"; // タイトル");
writeFile.writeString("private static final String TITLE_COLOR    = \"#467AE6\"; // タイトルの文字の色");
writeFile.writeString("private static final String TITLE_POINT    = \"20pt\"; // タイトルの文字のサイズ");
writeFile.writeString("");
writeFile.writeString("private static final String HOME_URL       = \"../Master-Page.jsp\"; // 戻り先のURL");
writeFile.writeString("private static final String LOG_FILE       = \"htbbsf" + n + ".log\"; // ログファイル名");
writeFile.writeString("private static final String COUNT_FILE     = \"count" + n + ".dat\"; // 記事番号保存ファイル");
writeFile.writeString("private static final boolean PAST_LOG      = true; // 過去ログ機能：true　あり :false なし");
writeFile.writeString("private static final String PAST_DIR       = \"past" + n + "\"; // 過去ログを保存するフォルダ名");
writeFile.writeString("private static final String PAST_COUNT     = \"pastcount" + n + ".dat\"; // 過去ログカウントファイル名");
writeFile.writeString("private static final int MAX_PAST_LINE     = 200; // 過去ログの1ファイル当たりの最大行数");
writeFile.writeString("private static final int MAX               = 50; // 最大親記事保持数");
writeFile.writeString("private static final int PAGE_MAX          = 10; // １ページ当りの最大表示親記事数");
writeFile.writeString("private static final String ADMIN_PASSWD   = \"apple\"; // 管理者パスワード");
writeFile.writeString("private static final boolean URL_AUTO_LINK = true; // URLの自動リンクをする：true しない：false");
writeFile.writeString("private static final boolean NORMAL_RES    = true; // 通常の返信機能を使う：true 使わない:false");
writeFile.writeString("private static final boolean TOP_SORT      = true; // 通常の返信がつくと親記事を一番上へ移動する：true しない：false");
writeFile.writeString("");
writeFile.writeString("private static final boolean TOMCAT3       = false; // Tomcat 3　で文字化けする場合trueに設定");
writeFile.writeString("");
writeFile.writeString("private static final boolean SEND_MAIL     = false; // 管理者にメールを送信する場合trueに設定");
writeFile.writeString("// 管理者メールアドレス(メールを送信する場合)");
writeFile.writeString("private static final String ADMIN_MAIL     = \"xxx@xxx.xxx\";");
writeFile.writeString("// sendmailパス(メールを送信する場合)");
writeFile.writeString("private static final String SENDMAIL_PATH  = \"/usr/sbin/sendmail\";");
writeFile.writeString("");
writeFile.writeString("private static final int SUB_MAX_LEN       = 15; // 題名の長さ(これ以上だと省略されます)");
writeFile.writeString("");
writeFile.writeString("// ファイルアップロード関連の設定");
writeFile.writeString("private static final String FILE_DIR       = \"" + n + "\"; // アップロードしたファイルを保存するフォルダ");
writeFile.writeString("private static final int MAX_POST_SIZE     = 200000000; // 送信するデータの最大サイズ(バイト)");
writeFile.writeString("");
writeFile.writeString("");
writeFile.writeString("// カラーリストとカラー名リストは対応するように設定してください");
writeFile.writeString("// カラーリスト");
writeFile.writeString("private static final String[] COLOR_LIST = { \"000000\" ,");
writeFile.writeString("                                             \"800000\" ,");
writeFile.writeString("                                             \"DF0000\" ,");
writeFile.writeString("                                             \"008040\" ,");
writeFile.writeString("                                             \"0000FF\" ,");
writeFile.writeString("                                             \"C100C1\" ,");
writeFile.writeString("                                             \"FF80C0\" ,");
writeFile.writeString("                                             \"FF8040\" ,");
writeFile.writeString("                                             \"000080\" };");
writeFile.writeString("// カラー名リスト");
writeFile.writeString("private static final String[] COLOR_NAME_LIST = { \"茶\" ,");
writeFile.writeString("                                                  \"黒\" ,");
writeFile.writeString("                                                  \"赤\" ,");
writeFile.writeString("                                                  \"みどり\" ,");
writeFile.writeString("                                                  \"青\" ,");
writeFile.writeString("                                                  \"紫\" ,");
writeFile.writeString("                                                  \"ピンク\" ,");
writeFile.writeString("                                                  \"オレンジ\" ,");
writeFile.writeString("                                                  \"あい色\" };");
writeFile.writeString("");
writeFile.writeString("");
writeFile.writeString("// アップロードを許可する拡張子");
writeFile.writeString("private static final String[] EXTENSION_LIST = { \"gif\",");
writeFile.writeString("                                                 \"jpg\",");
writeFile.writeString("                                                 \"jpeg\",");
writeFile.writeString("                                                 \"png\",");
writeFile.writeString("                                                 \"bmp\",");
writeFile.writeString("                                                 \"pdf\",");
writeFile.writeString("                                                 \"mid\",");
writeFile.writeString("                                                 \"mp3\",");
writeFile.writeString("                                                 \"wav\",");
writeFile.writeString("                                                 \"mpg\",");
writeFile.writeString("                                                 \"avi\",");
writeFile.writeString("                                                 \"ram\",");
writeFile.writeString("                                                 \"rm\",");
writeFile.writeString("                                                 \"zip\",");
writeFile.writeString("                                                 \"lzh\",");
writeFile.writeString("                                                 \"txt\",");
writeFile.writeString("                                                 \"java\",");
writeFile.writeString("                                                 \"doc\",");
writeFile.writeString("                                                 \"xls\"};");
writeFile.writeString("");
writeFile.writeString("// JSPファイルがあるディレクトリのパスが取得できずに、");
writeFile.writeString("// ファイルの書き込みができない場合に指定してください。");
writeFile.writeString("private static final String JSP_BASE_DIR   = \"\"; // JSPファイルがあるディレクトのパス(例）\"/home/tomcat/webapps/bbs/\"");
writeFile.writeString("/***************");
writeFile.writeString("*** 基本設定終 **");
writeFile.writeString("****************/");
writeFile.writeString("");
writeFile.writeString("/** ここから先は変更しないでください **/");
writeFile.writeString("// バージョン");
writeFile.writeString("private static final String VERSION = \"1.0\";");
writeFile.writeString("// モード定数");
writeFile.writeString("private static final String MODE_NORMAL   = \"normal\"; // 通常");
writeFile.writeString("private static final String MODE_REGIST   = \"regist\"; // 登録");
writeFile.writeString("private static final String MODE_USER_DEL = \"userdel\"; // 記事削除");
writeFile.writeString("private static final String MODE_HOW_TO   = \"howto\"; // 使い方");
writeFile.writeString("private static final String MODE_PAST     = \"past\"; // 過去ログ");
writeFile.writeString("private static final String MODE_LOG      = \"log\"; // 過去ログ表示");
writeFile.writeString("private static final String MODE_SEARCH   = \"search\"; // 過去ログ検索");
writeFile.writeString("private static final String MODE_ADMIN    = \"admin\"; // 管理用");
writeFile.writeString("private static final String MODE_RES_MSG  = \"resmsg\"; // 返信");
writeFile.writeString("// クッキーを発行するリスト");
writeFile.writeString("private static final String[] COOKIE_NAMES = { \"name\" ,");
writeFile.writeString("                                               \"email\" ,");
writeFile.writeString("                                               \"url\" ,");
writeFile.writeString("                                               \"passwd\" ,");
writeFile.writeString("                                               \"color\" };");
writeFile.writeString("");
writeFile.writeString("// 日付のフォーマット形式");
writeFile.writeString("private static final String DATE_PATTERN = \"yyyy/MM/dd(EEE) HH:mm:ss\";");
writeFile.writeString("// ログロック");
writeFile.writeString("private Object lock  = new Object();");
writeFile.writeString("// 過去ログロック");
writeFile.writeString("private Object plock = new Object();");
writeFile.writeString("%>");
writeFile.writeString("<%");
writeFile.writeString("// パス関連");
writeFile.writeString("String requestUri = request.getRequestURI();");
writeFile.writeString("String contextPath = request.getContextPath();");
writeFile.writeString("if (requestUri.indexOf(contextPath)==0) {");
writeFile.writeString("  requestUri = requestUri.substring(contextPath.length() + 1);");
writeFile.writeString("}");
writeFile.writeString("");
if(kind.equals("課題")){
writeFile.writeString("String JSP_PATH = ClassDefine.bbs_htbbs_dir + FILE_DIR +\".jsp\";");
} else {
writeFile.writeString("String JSP_PATH = ClassDefine.file_htbbs_dir + FILE_DIR +\".jsp\";");
}
writeFile.writeString("String JSP_FILE = JSP_PATH.substring(JSP_PATH.lastIndexOf(File.separator) + 1, JSP_PATH.length());");
writeFile.writeString("String BASE_PATH = JSP_PATH.substring(0 , JSP_PATH.lastIndexOf(File.separator) + 1);");
writeFile.writeString("if (!JSP_BASE_DIR.equals(\"\")) {");
writeFile.writeString("  if (!JSP_BASE_DIR.substring(JSP_BASE_DIR.length()-1).equals(File.separator)) {");
writeFile.writeString("    BASE_PATH = JSP_BASE_DIR + File.separator;");
writeFile.writeString("  } else {");
writeFile.writeString("    BASE_PATH = JSP_BASE_DIR;");
writeFile.writeString("  }");
writeFile.writeString("}");
writeFile.writeString("String LOG_PATH = BASE_PATH + LOG_FILE;");
writeFile.writeString("String COUNT_PATH = BASE_PATH + COUNT_FILE;");
writeFile.writeString("String PAST_COUNT_PATH = BASE_PATH + PAST_COUNT;");
writeFile.writeString("String PAST_DIR_PATH = BASE_PATH + PAST_DIR;");
writeFile.writeString("String FILE_DIR_PATH = BASE_PATH + FILE_DIR;");
writeFile.writeString("");
writeFile.writeString("File uploadFile = null;");
writeFile.writeString("int start,end;");
writeFile.writeString("Hashtable params = new Hashtable();");
writeFile.writeString("");
writeFile.writeString("// MIMEタイプを取得");
writeFile.writeString("String contentType = request.getContentType();");
writeFile.writeString("if (contentType!=null) {");
writeFile.writeString("  contentType = contentType.toLowerCase();");
writeFile.writeString("}");
writeFile.writeString("");
writeFile.writeString("if (contentType!=null && contentType.startsWith(\"multipart/form-data\")) { // マルチパートの場合");
writeFile.writeString("  // マルチパート用リクエスト取得");
writeFile.writeString("  FileUploadRequest uploadRequest;");
writeFile.writeString("  try {");
writeFile.writeString("    uploadRequest = new FileUploadRequest(request ,FILE_DIR_PATH,MAX_POST_SIZE);");
writeFile.writeString("  } catch (ExceededLimitException e) {");
writeFile.writeString("    showErrorHTML(out,\"アップロードできる最大容量を超えています\",JSP_FILE);");
writeFile.writeString("    return;");
writeFile.writeString("  } catch (FileSizeZeroException e) {");
writeFile.writeString("    showErrorHTML(out,\"アップロードするファイルのサイズが0です\",JSP_FILE);");
writeFile.writeString("    return;");
writeFile.writeString("  } catch (Exception e) {");
writeFile.writeString("    showErrorHTML(out,\"アップロード中にエラーが発生しました\",JSP_FILE);");
writeFile.writeString("    e.printStackTrace();");
writeFile.writeString("    return;");
writeFile.writeString("  }");
writeFile.writeString("  // ファイル関連");
writeFile.writeString("  uploadFile = uploadRequest.getFile(\"uploadfile\");");
writeFile.writeString("  if (uploadFile!=null) {");
writeFile.writeString("    String extension = uploadRequest.getFileExtension(\"uploadfile\");");
writeFile.writeString("    if (extension==null) {");
writeFile.writeString("      uploadFile.delete();");
writeFile.writeString("      showErrorHTML(out,\"アップロードするファイルの拡張子がありません\",JSP_FILE);");
writeFile.writeString("      return;");
writeFile.writeString("    }");
writeFile.writeString("    extension = extension.toLowerCase();");
writeFile.writeString("    if (!fileExtensionCheck(extension)) {");
writeFile.writeString("      uploadFile.delete();");
writeFile.writeString("      showErrorHTML(out,\"拡張子が「\" + extension + \"」のファイルはアップロードできません\",JSP_FILE);");
writeFile.writeString("      return;");
writeFile.writeString("    }");
writeFile.writeString("");
writeFile.writeString("    params.put(\"originalfilename\" , uploadRequest.getOriginalFileName(\"uploadfile\"));");
writeFile.writeString("    params.put(\"filesystemname\" , uploadRequest.getFilesystemName(\"uploadfile\"));");
writeFile.writeString("    params.put(\"filesystempath\" , uploadFile.getPath());");
writeFile.writeString("    params.put(\"fileextension\" , uploadRequest.getFileExtension(\"uploadfile\"));");
writeFile.writeString("    params.put(\"filecontenttype\" , uploadRequest.getFileContentType(\"uploadfile\"));");
writeFile.writeString("  }");
writeFile.writeString("");
writeFile.writeString("  // ページ切り替え関連");
writeFile.writeString("  String strStart = uploadRequest.getParameter(\"start\");");
writeFile.writeString("  if (strStart==null) {");
writeFile.writeString("    strStart = \"1\";");
writeFile.writeString("  }");
writeFile.writeString("  try {");
writeFile.writeString("    start = Integer.parseInt(strStart);");
writeFile.writeString("    if (start<1 || start > MAX) {");
writeFile.writeString("      showErrorHTML(out,\"パラメータが不正です\",JSP_FILE);");
writeFile.writeString("      return;");
writeFile.writeString("    }");
writeFile.writeString("    end = start + PAGE_MAX -1;");
writeFile.writeString("  } catch (Exception e) {");
writeFile.writeString("      showErrorHTML(out,e.toString(),JSP_FILE);");
writeFile.writeString("      return;");
writeFile.writeString("  }");
writeFile.writeString("  // パラメーターを取得");
writeFile.writeString("  Enumeration paramNames = uploadRequest.getParameterNames();");
writeFile.writeString("  while (paramNames.hasMoreElements()) {");
writeFile.writeString("    String paramName = (String)paramNames.nextElement();");
writeFile.writeString("    if (paramName.equals(\"del\")) {");
writeFile.writeString("      String[] del = uploadRequest.getParameterValues(\"del\");");
writeFile.writeString("      params.put(\"del\" , del);");
writeFile.writeString("    } else {");
writeFile.writeString("      params.put(paramName,uploadRequest.getParameter(paramName));");
writeFile.writeString("    }");
writeFile.writeString("  }");
writeFile.writeString("");
writeFile.writeString("} else { // マルチパートでない場合");
writeFile.writeString("  // ページ切り替え関連");
writeFile.writeString("  String strStart = request.getParameter(\"start\");");
writeFile.writeString("  if (strStart==null) {");
writeFile.writeString("    strStart = \"1\";");
writeFile.writeString("  }");
writeFile.writeString("  try {");
writeFile.writeString("    start = Integer.parseInt(strStart);");
writeFile.writeString("    if (start<1 || start > MAX) {");
writeFile.writeString("      showErrorHTML(out,\"パラメータが不正です\",JSP_FILE);");
writeFile.writeString("      return;");
writeFile.writeString("    }");
writeFile.writeString("    end = start + PAGE_MAX -1;");
writeFile.writeString("  } catch (Exception e) {");
writeFile.writeString("      showErrorHTML(out,e.toString(),JSP_FILE);");
writeFile.writeString("      return;");
writeFile.writeString("  }");
writeFile.writeString("  // パラメーターを取得");
writeFile.writeString("  Enumeration paramNames = request.getParameterNames();");
writeFile.writeString("  while (paramNames.hasMoreElements()) {");
writeFile.writeString("    String paramName = (String)paramNames.nextElement();");
writeFile.writeString("    if (paramName.equals(\"del\")) {");
writeFile.writeString("      String[] del = request.getParameterValues(\"del\");");
writeFile.writeString("      params.put(\"del\" , del);");
writeFile.writeString("    } else {");
writeFile.writeString("      params.put(paramName,toSJIS(request.getParameter(paramName)));");
writeFile.writeString("    }");
writeFile.writeString("  }");
writeFile.writeString("}");
writeFile.writeString("");
writeFile.writeString("// 現在の日付を設定");
writeFile.writeString("SimpleDateFormat sdf = new SimpleDateFormat(DATE_PATTERN,Locale.US);");
writeFile.writeString("params.put(\"date\" , sdf.format(new Date()));");
writeFile.writeString("// ホスト名を設定");
writeFile.writeString("String host = request.getRemoteHost();");
writeFile.writeString("if (host==null) {");
writeFile.writeString("  host = \"不明\";");
writeFile.writeString("}");
writeFile.writeString("params.put(\"host\" , host);");
writeFile.writeString("// ブラウザ名を取得");
writeFile.writeString("String userAgent = request.getHeader(\"User-Agent\");");
writeFile.writeString("params.put(\"user-agent\" , userAgent);");
writeFile.writeString("");
writeFile.writeString("// モードを取得");
writeFile.writeString("String mode = (String)params.get(\"mode\");");
writeFile.writeString("if (mode==null) {");
writeFile.writeString("  mode = MODE_NORMAL;");
writeFile.writeString("}");
writeFile.writeString("boolean showdata = false;");
writeFile.writeString("boolean showhowto = false;");
writeFile.writeString("boolean showlogin = false;");
writeFile.writeString("boolean showadmin = false;");
writeFile.writeString("boolean showpast = false;");
writeFile.writeString("boolean showlog = false;");
writeFile.writeString("boolean showsearch = false;");
writeFile.writeString("String msg = null;");
writeFile.writeString("Hashtable mailData = new Hashtable();");
writeFile.writeString("if (mode.equals(MODE_NORMAL)) { /** 通常表示 **/");
writeFile.writeString("  showdata = true;");
writeFile.writeString("} else if (mode.equals(MODE_HOW_TO)) { /** 使い方 **/");
writeFile.writeString("  showhowto = true;");
writeFile.writeString("} else if (mode.equals(MODE_ADMIN)) { /** 管理用 **/");
writeFile.writeString("  if (params.get(\"passwd\")==null) {");
writeFile.writeString("    showlogin = true;");
writeFile.writeString("  } else {");
writeFile.writeString("    // HTTPメソッドのチェック");
writeFile.writeString("    if (!request.getMethod().equalsIgnoreCase(\"POST\")) {");
writeFile.writeString("      showErrorHTML(out,\"不正なアクセスです\",JSP_FILE);");
writeFile.writeString("      return;");
writeFile.writeString("    }");
writeFile.writeString("    if (((String)params.get(\"passwd\")).equals(ADMIN_PASSWD)) {");
writeFile.writeString("      if (params.get(\"del\")!=null) {");
writeFile.writeString("        // データの削除");
writeFile.writeString("        msg = registData(mode , params , mailData , COUNT_PATH , LOG_PATH , PAST_COUNT_PATH ,PAST_DIR_PATH);");
writeFile.writeString("        if (msg!=null) {");
writeFile.writeString("          showErrorHTML(out,msg,JSP_FILE);");
writeFile.writeString("          return;");
writeFile.writeString("        }");
writeFile.writeString("      }");
writeFile.writeString("      showadmin = true;");
writeFile.writeString("    } else {");
writeFile.writeString("      msg = \"パスワードが間違っています\";");
writeFile.writeString("      showlogin = true;");
writeFile.writeString("    }");
writeFile.writeString("  }");
writeFile.writeString("");
writeFile.writeString("} else if (mode.equals(MODE_REGIST)) { /** 登録 **/");
writeFile.writeString("  // HTTPメソッドのチェック");
writeFile.writeString("  if (!request.getMethod().equalsIgnoreCase(\"POST\")) {");
writeFile.writeString("    showErrorHTML(out,\"不正なアクセスです\",JSP_FILE);");
writeFile.writeString("    if (uploadFile!=null) {");
writeFile.writeString("      uploadFile.delete();");
writeFile.writeString("    }");
writeFile.writeString("    return;");
writeFile.writeString("  }");
writeFile.writeString("  // パラメーターのチェック");
writeFile.writeString("  msg = paramCheck(mode , params , mailData);");
writeFile.writeString("  if (msg!=null) {");
writeFile.writeString("    showErrorHTML(out,msg,JSP_FILE);");
writeFile.writeString("    if (uploadFile!=null) {");
writeFile.writeString("      uploadFile.delete();");
writeFile.writeString("    }");
writeFile.writeString("    return;");
writeFile.writeString("  }");
writeFile.writeString("  // データの登録");
writeFile.writeString("  msg = registData(mode , params , mailData , COUNT_PATH , LOG_PATH , PAST_COUNT_PATH ,PAST_DIR_PATH);");
writeFile.writeString("  if (msg!=null) {");
writeFile.writeString("    showErrorHTML(out,msg,JSP_FILE);");
writeFile.writeString("    if (uploadFile!=null) {");
writeFile.writeString("      uploadFile.delete();");
writeFile.writeString("    }");
writeFile.writeString("    return;");
writeFile.writeString("  }");
writeFile.writeString("  // クッキーを発行");
writeFile.writeString("  if (params.get(\"cookie\")!=null) {");
writeFile.writeString("    addCookie(COOKIE_NAMES , params , response , Integer.MAX_VALUE);");
writeFile.writeString("  } else {");
writeFile.writeString("    addCookie(COOKIE_NAMES , params , response , 0);");
writeFile.writeString("  }");
writeFile.writeString("  showdata = true;");
writeFile.writeString("");
writeFile.writeString("} else if (mode.equals(MODE_USER_DEL)) { /** 記事削除 **/");
writeFile.writeString("  // HTTPメソッドのチェック");
writeFile.writeString("  if (!request.getMethod().equalsIgnoreCase(\"POST\")) {");
writeFile.writeString("    showErrorHTML(out,\"不正なアクセスです\",JSP_FILE);");
writeFile.writeString("    return;");
writeFile.writeString("  }");
writeFile.writeString("  // パラメーターのチェック");
writeFile.writeString("  msg = paramCheck(mode , params , mailData);");
writeFile.writeString("  if (msg!=null) {");
writeFile.writeString("    showErrorHTML(out,msg,JSP_FILE);");
writeFile.writeString("    return;");
writeFile.writeString("  }");
writeFile.writeString("  // データの削除");
writeFile.writeString("  msg = registData(mode , params , mailData , COUNT_PATH , LOG_PATH , PAST_COUNT_PATH ,PAST_DIR_PATH);");
writeFile.writeString("  if (msg!=null) {");
writeFile.writeString("    showErrorHTML(out,msg,JSP_FILE);");
writeFile.writeString("    return;");
writeFile.writeString("  }");
writeFile.writeString("  showdata = true;");
writeFile.writeString("} else if (mode.equals(MODE_RES_MSG)) { // 返信");
writeFile.writeString("  if (params.get(\"no\") == null) {");
writeFile.writeString("    showErrorHTML(out,\"不正なアクセスです\",JSP_FILE);");
writeFile.writeString("    return;");
writeFile.writeString("  }");
writeFile.writeString("  showdata = true;");
writeFile.writeString("} else if (mode.equals(MODE_PAST)) { // 過去ログ");
writeFile.writeString("  showpast = true;");
writeFile.writeString("} else if (mode.equals(MODE_SEARCH)) { // 過去ログ検索");
writeFile.writeString("  showsearch = true;");
writeFile.writeString("} else if (mode.equals(MODE_LOG)) { // 過去ログ表示");
writeFile.writeString("  showlog = true;");
writeFile.writeString("}");
writeFile.writeString("");
writeFile.writeString("/** データ表示 **/");
writeFile.writeString("if (showdata) {");
writeFile.writeString("  // クッキーの取得");
writeFile.writeString("  Hashtable cookieTable = getCookie(COOKIE_NAMES , params , request);");
writeFile.writeString("  cookieTable.put(\"subject\" , \"\");");
writeFile.writeString("  // カラー選択");
writeFile.writeString("  Hashtable colorHTML = new Hashtable();");
writeFile.writeString("  colorCheck(colorHTML , (String)cookieTable.get(\"color\"));");
writeFile.writeString("");
writeFile.writeString("  String btncap = \"Send\";");
writeFile.writeString("  // データの取得");
writeFile.writeString("  Vector dataList;");
writeFile.writeString("  if (mode.equals(MODE_RES_MSG)) { // 返信");
writeFile.writeString("    dataList = readData(LOG_PATH , (String)params.get(\"no\"));");
writeFile.writeString("    if (dataList==null) {");
writeFile.writeString("      showErrorHTML(out,\"その記事は既に削除されています\",JSP_FILE);");
writeFile.writeString("      return;");
writeFile.writeString("    }");
writeFile.writeString("    cookieTable.put(\"subject\" , \"Re:\" + (String)((Hashtable)dataList.get(0)).get(\"subject\"));");
writeFile.writeString("    btncap = \"Send\";");
writeFile.writeString("  } else { // 通常");
writeFile.writeString("    dataList = readData(LOG_PATH , null);");
writeFile.writeString("  }");
writeFile.writeString("  int size = dataList.size();");
writeFile.writeString("");
writeFile.writeString("  // タイトル");
writeFile.writeString("  String title = \"<font color=\\\"\" + TITLE_COLOR + \"\\\"><b style=\\\"font-size:\" + TITLE_POINT + \"\\\">\" + TITLE + \"</b></font>\";");
writeFile.writeString("  if (USE_IMG) {");
writeFile.writeString("    title = \"<img src=\\\"\" + IMG_PATH + \"\\\" border=\\\"0\\\">\";");
writeFile.writeString("  }");
writeFile.writeString("%>");
writeFile.writeString("<html>");
writeFile.writeString("<head>");
writeFile.writeString("<meta http-equiv=\"Content-type\" content=\"text/html; charset=shift-jis\">");
writeFile.writeString("<title><%=TITLE%></title>");
writeFile.writeString("<style type=\"text/css\">");
writeFile.writeString("<!--");
writeFile.writeString("body,tr,td,th { font-size:<%=TEXT_POINT%>;line-height: <%=TEXT_HIGHT%>; }");
writeFile.writeString("small { font-size:9pt; color:<%=TEXT_COLOR%> }");
writeFile.writeString("a:link {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=LINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("a:visited {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=VLINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("a:hover {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=HLINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("a:active {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=ALINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("-->");
writeFile.writeString("</style>");
writeFile.writeString("</head>");
writeFile.writeString("<body bgcolor=\"<%=BG_COLOR%>\" text=\"<%=TEXT_COLOR%>\" link=\"<%=LINK_COLOR%>\" vlink=\"<%=VLINK_COLOR%>\" alink=\"<%=ALINK_COLOR%>\">");
if(kind.equals("資料")){
writeFile.writeString("<div align=\"center\"><font size=5 color=\"blue\"><%=title%>");
} else {
writeFile.writeString("<div align=\"center\"><font size=5 color=\"blue\"><%=title%>");
}
writeFile.writeString("  <hr noshade size=\"1\">");
writeFile.writeString("</div>");
/*writeFile.writeString("<div align=\"center\">[ <a href=\"<%=HOME_URL%>\" target=\"_top\">トップに戻る</a> ] [ <a href=\"<%=JSP_FILE%>?mode=<%=MODE_HOW_TO%>\">使い方</a>");
writeFile.writeString("  ] <%if (PAST_LOG) {%>[<a href=\"<%=JSP_FILE%>?mode=<%=MODE_PAST%>\" target=\"_top\">過去ログ</a>] <%}%>[ <a href=\"<%=JSP_FILE%>?mode=<%=MODE_ADMIN%>\">管理用</a>");
writeFile.writeString("  ] [<a href=\"<%=JSP_FILE%>\">リロード</a>]");
writeFile.writeString("  <hr noshade size=\"1\">");
writeFile.writeString("</div>");*/
writeFile.writeString("<%");
writeFile.writeString("  if (mode.equals(MODE_RES_MSG)) {");
writeFile.writeString("%>");
writeFile.writeString("  <br>");
writeFile.writeString("[<a href=\"<%=JSP_FILE%>\">掲示板に戻る</a> ]");
writeFile.writeString("<table width=\"100%\" cellspacing=\"0\" cellpadding=\"3\" border=\"0\" bgcolor=\"#666666\">");
writeFile.writeString("    <tr>");
writeFile.writeString("      <td align=\"center\"><font color=\"#FFFFFF\"><b>返信</b></font></td>");
writeFile.writeString("    </tr>");
writeFile.writeString("  </table>");
writeFile.writeString("<table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"5\">");
writeFile.writeString("  <tr>");
writeFile.writeString("    <td>");
writeFile.writeString("<%");
writeFile.writeString("    for (int i=0;i<size;i++) {");
writeFile.writeString("      Hashtable data = (Hashtable)dataList.get(i);");
writeFile.writeString("      String no = (String)data.get(\"no\");");
writeFile.writeString("      String pno = (String)data.get(\"pno\");");
writeFile.writeString("      if (!no.equals(pno)) {");
writeFile.writeString("        out.println(\"<blockquote>\");");
writeFile.writeString("      }");
writeFile.writeString("      // 題名の長さ");
writeFile.writeString("      String subject = omitString((String)data.get(\"subject\"),SUB_MAX_LEN);");
writeFile.writeString("%>");
writeFile.writeString("      <hr size=\"1\" noshade>");
writeFile.writeString("      [<%=(String)data.get(\"no\")%>] <font color=\"<%=SUBJECT_COLOR%>\"><b><%=subject%></b></font> 投稿者：<%=(String)data.get(\"name\")%>");
writeFile.writeString("      <small>投稿日：<%=(String)data.get(\"date\")%></small><br>");
writeFile.writeString("      <blockquote>");
writeFile.writeString("        <font color=\"#<%=(String)data.get(\"color\")%>\">");
writeFile.writeString("        <%=(String)data.get(\"comment\")%>");
writeFile.writeString("        </font>");
writeFile.writeString("        <% if (data.get(\"filesystemname\")!=null)  { %>");
writeFile.writeString("		<br><br><b>添付ファイル：</b><a href=\"<%=FILE_DIR + \"/\" + (String)data.get(\"filesystemname\")%>\" target='_blank'><%=(String)data.get(\"originalfilename\")%></a>");
writeFile.writeString("        <% } %>");
writeFile.writeString("        <%=(String)data.get(\"url\")%>");
writeFile.writeString("      </blockquote>");
writeFile.writeString("<%");
writeFile.writeString("      if (!no.equals(pno)) {");
writeFile.writeString("        out.println(\"</blockquote>\");");
writeFile.writeString("      }");
writeFile.writeString("    } // end for");
writeFile.writeString("%>");
writeFile.writeString("<hr size=\"1\" noshade>");
writeFile.writeString("    </td>");
writeFile.writeString("  </tr>");
writeFile.writeString("</table>");
writeFile.writeString("<%");
writeFile.writeString("  } // end if");
writeFile.writeString("%>");
writeFile.writeString("<form action=\"<%=JSP_FILE%>\" method=\"POST\" enctype=\"multipart/form-data\">");
writeFile.writeString("  <blockquote>");
writeFile.writeString("    <center><table cellpadding=2 cellspacing=0 width=\"401\">");
writeFile.writeString("      <tr>");
writeFile.writeString("        <td nowrap><b>Name</b></td>");
writeFile.writeString("        <td nowrap> <input type=text name=name size=\"25\" maxlength=\"100\" tabindex=1 value=\"<%=cookieTable.get(\"name\")%>\">");
writeFile.writeString("        </td>");
writeFile.writeString("      </tr>");
writeFile.writeString("      <tr>");
writeFile.writeString("        <td nowrap><b></b></td>");
writeFile.writeString("        <td nowrap> <input type=hidden name=email value=\"<%=cookieTable.get(\"email\")%>\">");
writeFile.writeString("        </td>");
writeFile.writeString("      </tr>");
writeFile.writeString("      <tr>");
writeFile.writeString("        <td nowrap><b></b></td>");
writeFile.writeString("        <td nowrap> <input type=hidden name=subject value=\"<%=cookieTable.get(\"subject\")%>\">");
writeFile.writeString("          <input type=submit value=\"<%=btncap%>\" tabindex=8 name=\"submit\"> <input type=reset value=\"Reset\" tabindex=9 name=\"reset\">");
writeFile.writeString("          <input type=hidden name=mode value=\"<%=MODE_REGIST%>\">");
writeFile.writeString("          <%");
writeFile.writeString("  if (mode.equals(MODE_RES_MSG)) {");
writeFile.writeString("%>");
writeFile.writeString("          <input type=hidden name=pno value=\"<%=(String)params.get(\"no\")%>\">");
writeFile.writeString("          <%");
writeFile.writeString("  }");
writeFile.writeString("%>");
writeFile.writeString("        </td>");
writeFile.writeString("      </tr>");
writeFile.writeString("      <tr>");
writeFile.writeString("        <td colspan=2 nowrap> <b>Comment</b><br>");
if(kind.equals("資料")){
writeFile.writeString("        <%");
writeFile.writeString("          Escape_String convert = new Escape_String();");
writeFile.writeString("          String biko = \"\";");
writeFile.writeString("          if(size > 0){");
writeFile.writeString("            Hashtable data = (Hashtable)dataList.get(0);");
writeFile.writeString("            biko = biko.concat(convert.convertCsv((String)data.get(\"comment\")));");
writeFile.writeString("            String[] strarray = biko.split(\"\\n\");");
writeFile.writeString("            if(strarray.length >= 10){");
writeFile.writeString("        %>");
writeFile.writeString("        <textarea name=comment cols=\"70\" rows=\"<%= strarray.length%>\" wrap=hard tabindex=4><%=biko%></textarea>");
writeFile.writeString("        <%");
writeFile.writeString("        } else {");
writeFile.writeString("        %>");
writeFile.writeString("        <textarea name=comment cols=\"70\" rows=\"10\" wrap=hard tabindex=4><%=biko%></textarea>");
writeFile.writeString("        <%");
writeFile.writeString("        }");
writeFile.writeString("          } else {");
writeFile.writeString("        %>");
writeFile.writeString("        <textarea name=comment cols=\"70\" rows=\"10\" wrap=hard tabindex=4></textarea>");
writeFile.writeString("        <%");
writeFile.writeString("          }");
writeFile.writeString("         %>");
writeFile.writeString("        </textarea>");
} else {
writeFile.writeString("        <textarea name=comment cols=\"70\" rows=\"10\" wrap=hard tabindex=4></textarea>");
}
writeFile.writeString("        </td>");
writeFile.writeString("      </tr>");
/*writeFile.writeString("      <tr>");
writeFile.writeString("        <td nowrap><b>ＵＲＬ</b></td>");
writeFile.writeString("        <td nowrap> <input type=text name=url size=\"45\" value=\"<%=cookieTable.get(\"url\")%>\" maxlength=\"100\" tabindex=5 style=\"ime-mode: disabled\">");
writeFile.writeString("        </td>");
writeFile.writeString("      </tr>");*/
if(!kind.equals("資料")){
writeFile.writeString("      <% if (!mode.equals(MODE_RES_MSG)) { %>");
writeFile.writeString("      <tr>");
writeFile.writeString("        <td nowrap><strong>File Update</strong></td>");
writeFile.writeString("        <td nowrap><input name=\"uploadfile\" type=\"file\" id=\"uploadfile\" size=\"25\"></td>");
writeFile.writeString("      </tr>");
writeFile.writeString("      <% } %>");
}
/*writeFile.writeString("      <tr>");
writeFile.writeString("        <td nowrap><b>Deleto No</b></td>");
writeFile.writeString("        <td nowrap> <input type=password name=passwd size=10 maxlength=8 tabindex=6 value=\"<%=cookieTable.get(\"passwd\")%>\">");
writeFile.writeString("          <small>(記事削除時に使用)</small> 　");
writeFile.writeString("          <input type=\"checkbox\" name=\"cookie\" value=\"on\" checked> <small>クッキー情報を保存</small></td>");
writeFile.writeString("      </tr>");*/
writeFile.writeString("      <tr>");
/*writeFile.writeString("        <td nowrap height=\"11\"><b>Color</b></td>");
writeFile.writeString("        <td nowrap height=\"11\"><%=colorHTML.get(\"colorcheck\")%></td>");
*/
writeFile.writeString("      </tr>");
writeFile.writeString("    </table></center>");
writeFile.writeString("  </blockquote>");
writeFile.writeString("</form>");
writeFile.writeString("<table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"5\">");
writeFile.writeString("  <tr>");
writeFile.writeString("    <td>");
writeFile.writeString("<%");
writeFile.writeString("  int count = 0;");
writeFile.writeString("  if (!mode.equals(MODE_RES_MSG)) {");
writeFile.writeString("    for (int i=0;i<size;i++) {");
writeFile.writeString("      Hashtable data = (Hashtable)dataList.get(i);");
writeFile.writeString("      String no = (String)data.get(\"no\");");
writeFile.writeString("      String pno = (String)data.get(\"pno\");");
writeFile.writeString("      if (no.equals(pno)) {");
writeFile.writeString("        count++;");
writeFile.writeString("      }");
writeFile.writeString("      if (count>=start && count<=end) {");
writeFile.writeString("        String res = \"[ <a href=\\\"\" + JSP_FILE + \"?mode=\" + MODE_RES_MSG + \"&no=\" + no + \"\\\"></a> ]\";");
writeFile.writeString("        if (!NORMAL_RES) {");
writeFile.writeString("          res = \"\";");
writeFile.writeString("        }");
writeFile.writeString("        if (!no.equals(pno)) {");
writeFile.writeString("          res = \"\";");
writeFile.writeString("          out.println(\"<blockquote>\");");
writeFile.writeString("        }");
writeFile.writeString("        // 題名の長さ");
writeFile.writeString("        String subject = omitString((String)data.get(\"subject\"),SUB_MAX_LEN);");
writeFile.writeString("%>");
writeFile.writeString("      <hr size=\"1\" noshade>");
writeFile.writeString("      [<%=(String)data.get(\"no\")%>] <font color=\"<%=SUBJECT_COLOR%>\"><b></b></font> Name: <%=(String)data.get(\"name\")%>");
writeFile.writeString("      <small>Date: <%=(String)data.get(\"date\")%></small> <%=res%><br>");
writeFile.writeString("      <blockquote>");
writeFile.writeString("        <font color=\"#<%=(String)data.get(\"color\")%>\">");
writeFile.writeString("        <%=(String)data.get(\"comment\")%>");
writeFile.writeString("        </font>");
writeFile.writeString("        <% if (data.get(\"filesystemname\")!=null)  { %>");
writeFile.writeString("		<br><br><b>File: </b><a href=\"<%=FILE_DIR + \"/\" + (String)data.get(\"filesystemname\")%>\" target='_blank'><%=(String)data.get(\"originalfilename\")%></a>");
writeFile.writeString("        <% } %>");
writeFile.writeString("        <%=(String)data.get(\"url\")%>");
writeFile.writeString("	  </blockquote>");
writeFile.writeString("<%");
writeFile.writeString("        if (!no.equals(pno)) {");
writeFile.writeString("          out.println(\"</blockquote>\");");
writeFile.writeString("        }");
writeFile.writeString("      } // end if");
writeFile.writeString("    } // end for");
writeFile.writeString("  } // end if");
writeFile.writeString("%>");
writeFile.writeString("<hr size=\"1\" noshade>");
writeFile.writeString("    </td>");
writeFile.writeString("  </tr>");
writeFile.writeString("</table>");
writeFile.writeString("<table width=\"100%\" border=\"0\" cellpadding=\"5\" cellspacing=\"0\">");
writeFile.writeString("  <tr>");
writeFile.writeString("    <td>");
writeFile.writeString("<%");
writeFile.writeString("  if (!mode.equals(MODE_RES_MSG)) {");
writeFile.writeString("    int i = PAGE_MAX;");
writeFile.writeString("    boolean page_move = false;");
writeFile.writeString("    if (start - PAGE_MAX >= 1) {");
writeFile.writeString("      out.println(\"<input type=button value=\\\"前ページ\\\" onClick=\\\"location.href='\" + JSP_FILE + \"?start=\" + (start - PAGE_MAX) + \"'\\\"> \");");
writeFile.writeString("    }");
writeFile.writeString("    if (start + PAGE_MAX <= count) {");
writeFile.writeString("      out.println(\"<input type=button value=\\\"次ページ\\\" onClick=\\\"location.href='\" + JSP_FILE + \"?start=\" + (start + PAGE_MAX) + \"'\\\"> \");");
writeFile.writeString("    }");
writeFile.writeString("    if (count > i) {");
writeFile.writeString("      out.print(\"<br><br>[直接移動] \");");
writeFile.writeString("      page_move = true;");
writeFile.writeString("    }");
writeFile.writeString("    while (count > i - PAGE_MAX) {");
writeFile.writeString("      if (i - PAGE_MAX + 1==start) {");
writeFile.writeString("        if (page_move) {");
writeFile.writeString("          out.print(\"[<b>\" + (i/PAGE_MAX) + \"</b>] \");");
writeFile.writeString("        }");
writeFile.writeString("      } else {");
writeFile.writeString("        out.print(\"[<a href=\\\"\" + JSP_FILE + \"?start=\" + (i - PAGE_MAX +1) +\"\\\">\" + (i/PAGE_MAX) + \"</a>] \");");
writeFile.writeString("      }");
writeFile.writeString("      i+=PAGE_MAX;");
writeFile.writeString("    }");
writeFile.writeString("  }");
writeFile.writeString("%>");
writeFile.writeString("    </td>");
writeFile.writeString("  </tr>");
writeFile.writeString("</table>");
writeFile.writeString("<table width=\"304\" align=right cellspacing=\"0\" cellpadding=\"2\" border=\"0\">");
writeFile.writeString("  <tr>");
writeFile.writeString("    <td nowrap align=center>");
writeFile.writeString("      <form action=\"<%=JSP_FILE%>\" method=\"POST\"  enctype=\"multipart/form-data\">");
writeFile.writeString("        <input type=hidden name=mode value=\"<%=MODE_USER_DEL%>\">");
writeFile.writeString("        <small>No</small>");
writeFile.writeString("        <input type=text name=no size=3 maxlength=\"6\" style=\"ime-mode: disabled\">");
/*
writeFile.writeString("        <small>削除キー</small>");
writeFile.writeString("        <input type=password name=delpasswd size=5 maxlength=8>");
*/
writeFile.writeString("        <input type=submit value=\"Delete\">");
writeFile.writeString("      </form>");
writeFile.writeString("    </td>");
writeFile.writeString("  </tr>");
writeFile.writeString("</table>");
writeFile.writeString("<div align=\"center\"><br clear=all><!-- 著作権表示（削除改変不可）-->");
//writeFile.writeString("  <small><a href=\"http://www.hellohiro.com/\" target=\"_top\">Hello JSP BBS F</a></small></div>");
writeFile.writeString("</body>");
writeFile.writeString("</html>");
writeFile.writeString("<%");
writeFile.writeString("} // end if");
writeFile.writeString("/** 使い方表示 **/");
writeFile.writeString("if (showhowto) {");
writeFile.writeString("%>");
writeFile.writeString("<html>");
writeFile.writeString("<head>");
writeFile.writeString("<meta http-equiv=\"Content-type\" content=\"text/html; charset=shift-jis\">");
writeFile.writeString("<style type=\"text/css\">");
writeFile.writeString("<!--");
writeFile.writeString("body,tr,td,th { font-size:<%=TEXT_POINT%>;line-height: <%=TEXT_HIGHT%>; }");
writeFile.writeString("small { font-size:9pt; color:<%=TEXT_COLOR%> }");
writeFile.writeString("a:link {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=LINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("a:visited {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=VLINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("a:hover {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=HLINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("a:active {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=ALINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("-->");
writeFile.writeString("</style>");
writeFile.writeString("<title><%=TITLE%> 使い方</title>");
writeFile.writeString("</head>");
writeFile.writeString("<body bgcolor=\"<%=BG_COLOR%>\" text=\"<%=TEXT_COLOR%>\" link=\"<%=LINK_COLOR%>\" vlink=\"<%=VLINK_COLOR%>\" alink=\"<%=ALINK_COLOR%>\">");
writeFile.writeString("[<a href=\"<%=JSP_FILE%>\">掲示板に戻る</a>]");
writeFile.writeString("<table width=\"100%\" cellspacing=\"0\" cellpadding=\"3\" border=\"0\" bgcolor=\"#666666\">");
writeFile.writeString("  <tr>");
writeFile.writeString("    <td align=\"center\"><font color=\"#FFFFFF\"><b>掲示板の使い方</b></font></td>");
writeFile.writeString("  </tr>");
writeFile.writeString("</table>");
writeFile.writeString("<ol>");
writeFile.writeString("  <p>");
writeFile.writeString("  <li>投稿記事に<b>HTMLタグは使用できません。</b>");
writeFile.writeString("    <p>");
writeFile.writeString("  <li><b>「おなまえ」</b>と<b>「コメント」</b>は必ず入力しなければなりません。「Ｅメール」、「URL」、「題名」、「削除キー」は任意です。");
writeFile.writeString("    <p>");
writeFile.writeString("  <li>投稿時に<b>「削除キー」</b>を入力しておくと、その「削除キー」を使って後で自分の記事を削除することができます。");
writeFile.writeString("    <p>");
writeFile.writeString("  <li>投稿時に<b>「削除キー」</b>を入力していない場合はその記事を削除できません。ご注意ください。");
writeFile.writeString("    <p>");
writeFile.writeString("  <li><b>「クッキー情報を保存」</b>にチェックを入れておくと、次回から、おなまえ、Ｅメール、ＵＲＬ、文字色、削除キーは自動入力されます。");
writeFile.writeString("    <p>");
writeFile.writeString("  <li>親記事の最大保持件数は<b>最大 <%=MAX%>件</b>です。それを超えると古い記事から");
writeFile.writeString("    <% if (PAST_LOG) { %>");
writeFile.writeString("    過去ログに書き込まれます。");
writeFile.writeString("    <% } else { %>");
writeFile.writeString("    削除されます。");
writeFile.writeString("    <% } %>");
writeFile.writeString("    <p>");
writeFile.writeString("  <li> 自分の記事を削除する場合はページ右下のフォームより行うことができます。");
writeFile.writeString("    <p>");
writeFile.writeString("  <li>管理者がこの掲示板に相応しくない内容と判断した場合は予告なく削除することがあります。");
writeFile.writeString("</ol>");
writeFile.writeString("<table width=\"100%\" cellspacing=\"0\" cellpadding=\"3\" border=\"0\" bgcolor=\"#666666\">");
writeFile.writeString("  <tr>");
writeFile.writeString("    <td align=\"center\">　</td>");
writeFile.writeString("  </tr>");
writeFile.writeString("</table>");
writeFile.writeString("<div align=\"center\"><br><!-- 著作権表示（削除改変不可）-->");
//writeFile.writeString("  <a href=\"http://www.hellohiro.com/\" target=\"_top\">Hello JSP BBS F</a></div>");
writeFile.writeString("</body>");
writeFile.writeString("</html>");
writeFile.writeString("<%");
writeFile.writeString("} // end if");
writeFile.writeString("/** 管理者ログインページ表示 **/");
writeFile.writeString("if (showlogin) {");
writeFile.writeString("%>");
writeFile.writeString("<html>");
writeFile.writeString("<head>");
writeFile.writeString("<meta http-equiv=\"Content-type\" content=\"text/html; charset=shift-jis\">");
writeFile.writeString("<title><%=TITLE%> 認証</title>");
writeFile.writeString("<style type=\"text/css\">");
writeFile.writeString("<!--");
writeFile.writeString("body,tr,td,th { font-size:<%=TEXT_POINT%>;line-height: <%=TEXT_HIGHT%>; }");
writeFile.writeString("small { font-size:9pt; color:<%=TEXT_COLOR%> }");
writeFile.writeString("a:link {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=LINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("a:visited {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=VLINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("a:hover {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=HLINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("a:active {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=ALINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("-->");
writeFile.writeString("</style>");
writeFile.writeString("</head>");
writeFile.writeString("<body bgcolor=\"<%=BG_COLOR%>\" text=\"<%=TEXT_COLOR%>\" link=\"<%=LINK_COLOR%>\" vlink=\"<%=VLINK_COLOR%>\" alink=\"<%=ALINK_COLOR%>\">");
writeFile.writeString("[<a href=\"<%=JSP_FILE%>\">掲示板に戻る</a>]");
writeFile.writeString("<table width=\"100%\" cellspacing=\"0\" cellpadding=\"3\" border=\"0\" bgcolor=\"#666666\" align=\"center\">");
writeFile.writeString("  <tr>");
writeFile.writeString("    <td align=\"center\"><font color=\"#FFFFFF\"><b>認証</b></font></td>");
writeFile.writeString("  </tr>");
writeFile.writeString("</table>");
writeFile.writeString("<form action=\"<%=JSP_FILE%>\" method=\"POST\">");
writeFile.writeString("  <div align=\"center\">");
writeFile.writeString("    <input type=hidden name=mode value=\"<%=MODE_ADMIN%>\">");
writeFile.writeString("  </div>");
writeFile.writeString("  <div align=\"center\"><b>パスワードを入力してください</b><br>");
writeFile.writeString("    <p><input type=\"password\" name=\"passwd\" size=\"10\" >");
writeFile.writeString("    <br>");
writeFile.writeString("<font color=\"#CC0000\">");
writeFile.writeString("<%");
writeFile.writeString("  if (msg!=null) out.print(msg);");
writeFile.writeString("%>");
writeFile.writeString("</font>");
writeFile.writeString("  </div>");
writeFile.writeString("  <div align=\"center\"> </div>");
writeFile.writeString("  <P align=\"center\">");
writeFile.writeString("    <input type=submit value=\"ログイン\">");
writeFile.writeString("</form>");
writeFile.writeString("<table width=\"100%\" cellspacing=\"0\" cellpadding=\"3\" border=\"0\" bgcolor=\"#666666\" align=\"center\">");
writeFile.writeString("  <tr>");
writeFile.writeString("    <td align=\"center\">　</td>");
writeFile.writeString("  </tr>");
writeFile.writeString("</table>");
writeFile.writeString("<div align=\"center\"><br><!-- 著作権表示（削除改変不可）-->");
//writeFile.writeString("  <a href=\"http://www.hellohiro.com/\" target=\"_top\">Hello JSP BBS F</a> </div>");
writeFile.writeString("</body>");
writeFile.writeString("</html>");
writeFile.writeString("<%");
writeFile.writeString("} // end if");
writeFile.writeString("/** 管理者画面表示 **/");
writeFile.writeString("if (showadmin) {");
writeFile.writeString("  // データの取得");
writeFile.writeString("  Vector dataList = readData(LOG_PATH , null);");
writeFile.writeString("  int size = dataList.size();");
writeFile.writeString("%>");
writeFile.writeString("<html>");
writeFile.writeString("<head>");
writeFile.writeString("<meta http-equiv=\"Content-type\" content=\"text/html; charset=shift-jis\">");
writeFile.writeString("<title><%=TITLE%> 管理ページ</title>");
writeFile.writeString("<style type=\"text/css\">");
writeFile.writeString("<!--");
writeFile.writeString("body,tr,td,th { font-size:<%=TEXT_POINT%>;line-height: <%=TEXT_HIGHT%>; }");
writeFile.writeString("small { font-size:9pt; color:<%=TEXT_COLOR%> }");
writeFile.writeString("a:link {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=LINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("a:visited {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=VLINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("a:hover {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=HLINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("a:active {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=ALINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("-->");
writeFile.writeString("</style>");
writeFile.writeString("</head>");
writeFile.writeString("<body bgcolor=\"<%=BG_COLOR%>\" text=\"<%=TEXT_COLOR%>\" link=\"<%=LINK_COLOR%>\" vlink=\"<%=VLINK_COLOR%>\" alink=\"<%=ALINK_COLOR%>\">");
writeFile.writeString("[<a href=\"<%=JSP_FILE%>\">掲示板に戻る</a>]");
writeFile.writeString("<table width=\"100%\" cellspacing=\"0\" cellpadding=\"3\" border=\"0\" bgcolor=\"#666666\" align=\"center\">");
writeFile.writeString("  <tr>");
writeFile.writeString("    <td align=\"center\"><font color=\"#FFFFFF\"><b>管理ページ</b></font></td>");
writeFile.writeString("  </tr>");
writeFile.writeString("</table>");
writeFile.writeString("<form action=\"<%=JSP_FILE%>\" method=\"POST\">");
writeFile.writeString("  <div align=\"center\">");
writeFile.writeString("    <input type=hidden name=mode value=\"<%=MODE_ADMIN%>\">");
writeFile.writeString("    <input type=hidden name=passwd value=\"<%=(String)params.get(\"passwd\")%>\">");
writeFile.writeString("  </div>");
writeFile.writeString("  <div align=\"center\">削除したい記事にチェックを入れ削除ボタンを押して下さい。 <br>");
writeFile.writeString("    <br>");
writeFile.writeString("  </div>");
writeFile.writeString("  <div align=\"center\">");
writeFile.writeString("    <table border=1 cellspacing=0 cellpadding=\"2\">");
writeFile.writeString("      <tr>");
writeFile.writeString("        <th nowrap><font color=\"#666666\">削除</font></th>");
writeFile.writeString("        <th nowrap><font color=\"#666666\">No</font></th>");
writeFile.writeString("        <th nowrap><font color=\"#666666\">ホスト名</font></th>");
writeFile.writeString("        <th nowrap><font color=\"#666666\">題名</font></th>");
writeFile.writeString("        <th nowrap><font color=\"#666666\">投稿者</font></th>");
writeFile.writeString("        <th nowrap><font color=\"#666666\">投稿日</font></th>");
writeFile.writeString("        <th nowrap><font color=\"#666666\">コメント</font></th>");
writeFile.writeString("        <th nowrap><font color=\"#666666\">添付ファイル</font></th>");
writeFile.writeString("      </tr>");
writeFile.writeString("      <%");
writeFile.writeString("  for (int i=0;i<size;i++) {");
writeFile.writeString("    Hashtable data = (Hashtable)dataList.get(i);");
writeFile.writeString("    String no = (String)data.get(\"no\");");
writeFile.writeString("    String subject = (String)data.get(\"subject\");");
writeFile.writeString("    subject = omitString(removeTag(subject) , 8);");
writeFile.writeString("    String name = (String)data.get(\"name\");");
writeFile.writeString("    name = omitString(removeTag(name) , 8);");
writeFile.writeString("    String comment = (String)data.get(\"comment\");");
writeFile.writeString("    comment = omitString(removeTag(comment), 12);");
writeFile.writeString("    String fileName = (String)data.get(\"filesystemname\");");
writeFile.writeString("    String fileExist = \"[無]\";");
writeFile.writeString("	if (fileName!=null) {");
writeFile.writeString("	  fileExist = \"[<a href=\\\"\" + FILE_DIR + \"/\" + (String)data.get(\"filesystemname\") + \"\\\" target='_blank'>有</a>]\";");
writeFile.writeString("	}");
writeFile.writeString("%>");
writeFile.writeString("      <tr valign=\"middle\">");
writeFile.writeString("        <td nowrap align=\"center\"> <input type=checkbox name=del value=\"<%=no%>\">");
writeFile.writeString("        </td>");
writeFile.writeString("        <td nowrap align=\"center\"><b><%=no%></b></td>");
writeFile.writeString("        <td nowrap><%=(String)data.get(\"host\")%></td>");
writeFile.writeString("        <td><%=subject%></td>");
writeFile.writeString("        <td><%=name%></td>");
writeFile.writeString("        <td nowrap><small><%=(String)data.get(\"date\")%></small></td>");
writeFile.writeString("        <td><small><%=comment%></small></td>");
writeFile.writeString("        <td align=\"center\"><%=fileExist%></td>");
writeFile.writeString("      </tr>");
writeFile.writeString("      <%");
writeFile.writeString("  } // end for");
writeFile.writeString("%>");
writeFile.writeString("    </table>");
writeFile.writeString("  </div>");
writeFile.writeString("  <P align=\"center\">");
writeFile.writeString("    <input type=submit value=\"削除する\">");
writeFile.writeString("    　");
writeFile.writeString("<input type=reset value=\"リセット\">");
writeFile.writeString("</form>");
writeFile.writeString("<table width=\"100%\" cellspacing=\"0\" cellpadding=\"3\" border=\"0\" bgcolor=\"#666666\" align=\"center\">");
writeFile.writeString("  <tr>");
writeFile.writeString("    <td align=\"center\">　</td>");
writeFile.writeString("  </tr>");
writeFile.writeString("</table>");
writeFile.writeString("<div align=\"center\"><br><!-- 著作権表示（削除改変不可）-->");
//writeFile.writeString("  <a href=\"http://www.hellohiro.com/\" target=\"_top\">Hello JSP BBS F</a></div>");
writeFile.writeString("</body>");
writeFile.writeString("</html>");
writeFile.writeString("<%");
writeFile.writeString("} // end if");
writeFile.writeString("/** 過去ログ画面表示 **/");
writeFile.writeString("if (showpast) {");
writeFile.writeString("%>");
writeFile.writeString("<html>");
writeFile.writeString("<head>");
writeFile.writeString("<meta http-equiv=\"Content-type\" content=\"text/html; charset=shift-jis\">");
writeFile.writeString("<title><%=TITLE%> 過去ログ</title>");
writeFile.writeString("<style type=\"text/css\">");
writeFile.writeString("<!--");
writeFile.writeString("body,tr,td,th { font-size:<%=TEXT_POINT%>;line-height: <%=TEXT_HIGHT%>; }");
writeFile.writeString("small { font-size:9pt; color:<%=TEXT_COLOR%> }");
writeFile.writeString("a:link {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=LINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("a:visited {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=VLINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("a:hover {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=HLINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("a:active {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=ALINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("-->");
writeFile.writeString("</style>");
writeFile.writeString("<script language=\"JavaScript\" type=\"text/JavaScript\">");
writeFile.writeString("<!--");
writeFile.writeString("function goToPastLog(form) {");
writeFile.writeString("  if (form.select_file.selectedIndex >= 0) {");
writeFile.writeString("    form.mode.value = \"<%=MODE_LOG%>\";");
writeFile.writeString("    form.submit();");
writeFile.writeString("  }");
writeFile.writeString("}");
writeFile.writeString("function goToResult(form) {");
writeFile.writeString("  form.mode.value = \"<%=MODE_SEARCH%>\";");
writeFile.writeString("  form.submit();");
writeFile.writeString("}");
writeFile.writeString("//-->");
writeFile.writeString("</script>");
writeFile.writeString("</head>");
writeFile.writeString("<%");
writeFile.writeString("File dir = new File(PAST_DIR_PATH);");
writeFile.writeString("String[] fileList = dir.list();");
writeFile.writeString("String title = \"過去ログ\";");
writeFile.writeString("if (fileList == null || fileList.length == 0) {");
writeFile.writeString("  title = \"過去ログはありません\";");
writeFile.writeString("}");
writeFile.writeString("%>");
writeFile.writeString("<body bgcolor=\"<%=BG_COLOR%>\" text=\"<%=TEXT_COLOR%>\" link=\"<%=LINK_COLOR%>\" vlink=\"<%=VLINK_COLOR%>\" alink=\"<%=ALINK_COLOR%>\">");
writeFile.writeString("[<a href=\"<%=JSP_FILE%>\">掲示板に戻る</a>]");
writeFile.writeString("<table width=\"100%\" cellspacing=\"0\" cellpadding=\"3\" border=\"0\" bgcolor=\"#666666\" align=\"center\">");
writeFile.writeString("  <tr>");
writeFile.writeString("    <td align=\"center\"><font color=\"#FFFFFF\"><b><%=title%></b></font></td>");
writeFile.writeString("  </tr>");
writeFile.writeString("</table>");
writeFile.writeString("<form action=\"<%=JSP_FILE%>\" method=\"POST\">");
writeFile.writeString("  <div align=\"center\">過去ログ：");
writeFile.writeString("    <select name=\"select_file\" id=\"select_file\">");
writeFile.writeString("<%");
writeFile.writeString("if (fileList!=null) {");
writeFile.writeString("  for (int i=fileList.length-1;i>=0;i--) {");
writeFile.writeString("%>");
writeFile.writeString("      <option value=\"<%=fileList[i]%>\"><%=fileList[i]%></option>");
writeFile.writeString("<%");
writeFile.writeString("  }");
writeFile.writeString("}");
writeFile.writeString("%>");
writeFile.writeString("    </select>");
writeFile.writeString("    　");
writeFile.writeString("    <input type=button onClick=\"goToPastLog(this.form)\" value=\"移動\">");
writeFile.writeString("    　過去ログ検索：");
writeFile.writeString("    <input name=\"keyword\" type=\"text\" id=\"keyword\" size=\"15\" maxlength=\"20\">");
writeFile.writeString("    　");
writeFile.writeString("    <input type=button onClick=\"goToResult(this.form)\" value=\"検索\">");
writeFile.writeString("    <input name=\"mode\" type=\"hidden\" id=\"mode\" value=\"\">");
writeFile.writeString("  </div>");
writeFile.writeString("</form>");
writeFile.writeString("<table width=\"100%\" cellspacing=\"0\" cellpadding=\"3\" border=\"0\" bgcolor=\"#666666\" align=\"center\">");
writeFile.writeString("  <tr>");
writeFile.writeString("    <td align=\"center\">　</td>");
writeFile.writeString("  </tr>");
writeFile.writeString("</table>");
writeFile.writeString("<div align=\"center\"><br>");
writeFile.writeString("  <!-- 著作権表示（削除改変不可）-->");
//writeFile.writeString("  <a href=\"http://www.hellohiro.com/\" target=\"_top\">Hello JSP BBS F</a> </div>");
writeFile.writeString("</body>");
writeFile.writeString("</html>");
writeFile.writeString("<%");
writeFile.writeString("} // end if");
writeFile.writeString("/** 過去ログ検索結果表示 **/");
writeFile.writeString("if (showsearch) {");
writeFile.writeString("%>");
writeFile.writeString("<html>");
writeFile.writeString("<head>");
writeFile.writeString("<meta http-equiv=\"Content-type\" content=\"text/html; charset=shift-jis\">");
writeFile.writeString("<title><%=TITLE%> 過去ログ検索結果</title>");
writeFile.writeString("<style type=\"text/css\">");
writeFile.writeString("<!--");
writeFile.writeString("body,tr,td,th { font-size:<%=TEXT_POINT%>;line-height: <%=TEXT_HIGHT%>; }");
writeFile.writeString("small { font-size:9pt; color:<%=TEXT_COLOR%> }");
writeFile.writeString("a:link {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=LINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("a:visited {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=VLINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("a:hover {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=HLINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("a:active {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=ALINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("-->");
writeFile.writeString("</style>");
writeFile.writeString("</head>");
writeFile.writeString("<body bgcolor=\"<%=BG_COLOR%>\" text=\"<%=TEXT_COLOR%>\" link=\"<%=LINK_COLOR%>\" vlink=\"<%=VLINK_COLOR%>\" alink=\"<%=ALINK_COLOR%>\">");
writeFile.writeString("[<a href=\"<%=JSP_FILE%>\">掲示板に戻る</a>]");
writeFile.writeString("<table width=\"100%\" cellspacing=\"0\" cellpadding=\"3\" border=\"0\" bgcolor=\"#666666\" align=\"center\">");
writeFile.writeString("  <tr>");
writeFile.writeString("    <td align=\"center\"><font color=\"#FFFFFF\"><b>過去ログ検索結果</b></font></td>");
writeFile.writeString("  </tr>");
writeFile.writeString("</table><br>");
writeFile.writeString("<div align=\"center\">[<a href=\"javascript:history.back()\">検索画面に戻る</a>] </div>");
writeFile.writeString("<div align=\"center\"><br>");
writeFile.writeString("<%");
writeFile.writeString("String keyword = (String)params.get(\"keyword\");");
writeFile.writeString("if (keyword!=null && !keyword.trim().equals(\"\")) {");
writeFile.writeString("  keyword = keyword.trim();");
writeFile.writeString("  Vector lines = new Vector();");
writeFile.writeString("  File dir = new File(PAST_DIR_PATH);");
writeFile.writeString("  String[] fileList = dir.list();");
writeFile.writeString("  if (fileList!=null) {");
writeFile.writeString("    for (int i=fileList.length-1;i>=0;i--) {");
writeFile.writeString("      String filePath = PAST_DIR_PATH + File.separator + fileList[i];");
writeFile.writeString("      BufferedReader br = new BufferedReader(");
writeFile.writeString("                          new InputStreamReader(");
writeFile.writeString("                          new FileInputStream(filePath),\"shift-jis\"));");
writeFile.writeString("      String line = null;");
writeFile.writeString("      while ((line=br.readLine())!=null) {");
writeFile.writeString("        if (line.indexOf(keyword)>=0) {");
writeFile.writeString("          lines.add(line);");
writeFile.writeString("        }");
writeFile.writeString("      }");
writeFile.writeString("      br.close();");
writeFile.writeString("    }");
writeFile.writeString("  }");
writeFile.writeString("  if (lines.size()==0) {");
writeFile.writeString("    if (fileList==null || fileList.length==0) {");
writeFile.writeString("      out.println(\"過去ログが存在しません\");");
writeFile.writeString("    } else {");
writeFile.writeString("      out.println(\"見つかりませんでした\");");
writeFile.writeString("    }");
writeFile.writeString("  } else {");
writeFile.writeString("    out.println(lines.size() + \"件ヒットしました\");");
writeFile.writeString("    out.println(\"<div align=\\\"left\\\">\");");
writeFile.writeString("    for (int i=0;i<lines.size();i++) {");
writeFile.writeString("      out.println(lines.get(i));");
writeFile.writeString("    }");
writeFile.writeString("    out.println(\"</div>\");");
writeFile.writeString("  }");
writeFile.writeString("} else {");
writeFile.writeString("  out.println(\"キーワードを指定してください\");");
writeFile.writeString("}");
writeFile.writeString("%>");
writeFile.writeString("  <br>");
writeFile.writeString("  <br>");
writeFile.writeString("  [<a href=\"javascript:history.back()\">検索画面に戻る</a>]</div><br>");
writeFile.writeString("<table width=\"100%\" cellspacing=\"0\" cellpadding=\"3\" border=\"0\" bgcolor=\"#666666\" align=\"center\">");
writeFile.writeString("  <tr>");
writeFile.writeString("    <td align=\"center\">");
writeFile.writeString("　</td>");
writeFile.writeString("  </tr>");
writeFile.writeString("</table>");
writeFile.writeString("<div align=\"center\"><br>");
writeFile.writeString("  <!-- 著作権表示（削除改変不可）-->");
//writeFile.writeString("  <a href=\"http://www.hellohiro.com/\" target=\"_top\">Hello JSP BBS F</a> </div>");
writeFile.writeString("</body>");
writeFile.writeString("</html>");
writeFile.writeString("<%");
writeFile.writeString("} // end if");
writeFile.writeString("/** 過去ログ表示 **/");
writeFile.writeString("if (showlog) {");
writeFile.writeString("%>");
writeFile.writeString("<html>");
writeFile.writeString("<head>");
writeFile.writeString("<meta http-equiv=\"Content-type\" content=\"text/html; charset=shift-jis\">");
writeFile.writeString("<title><%=TITLE%> 過去ログ表示 [ <%=(String)params.get(\"select_file\")%> ]</title>");
writeFile.writeString("<style type=\"text/css\">");
writeFile.writeString("<!--");
writeFile.writeString("body,tr,td,th { font-size:<%=TEXT_POINT%>;line-height: <%=TEXT_HIGHT%>; }");
writeFile.writeString("small { font-size:9pt; color:<%=TEXT_COLOR%> }");
writeFile.writeString("a:link {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=LINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("a:visited {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=VLINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("a:hover {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=HLINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("a:active {");
writeFile.writeString("  text-decoration: underline; font-weight: normal; color: <%=ALINK_COLOR%>");
writeFile.writeString("}");
writeFile.writeString("-->");
writeFile.writeString("</style>");
writeFile.writeString("</head>");
writeFile.writeString("<body bgcolor=\"<%=BG_COLOR%>\" text=\"<%=TEXT_COLOR%>\" link=\"<%=LINK_COLOR%>\" vlink=\"<%=VLINK_COLOR%>\" alink=\"<%=ALINK_COLOR%>\">");
writeFile.writeString("[<a href=\"<%=JSP_FILE%>\">掲示板に戻る</a>]");
writeFile.writeString("<table width=\"100%\" cellspacing=\"0\" cellpadding=\"3\" border=\"0\" bgcolor=\"#666666\" align=\"center\">");
writeFile.writeString("  <tr>");
writeFile.writeString("    <td align=\"center\"><font color=\"#FFFFFF\"><b>過去ログ表示 [ <%=(String)params.get(\"select_file\")%> ]</b></font></td>");
writeFile.writeString("  </tr>");
writeFile.writeString("</table><br><div align=\"center\">[<a href=\"javascript:history.back()\">検索画面に戻る</a>] </div>");
writeFile.writeString("<div align=\"left\"><br>");
writeFile.writeString("<%");
writeFile.writeString("String fileName = (String)params.get(\"select_file\");");
writeFile.writeString("if (fileName==null || fileName.equals(\"\") || fileName.indexOf(File.separator) > 0) {");
writeFile.writeString("  out.println(\"ログファイルが存在しません\");");
writeFile.writeString("} else {");
writeFile.writeString("  String filePath = PAST_DIR_PATH + File.separator + fileName;");
writeFile.writeString("  File logFile = new File(filePath);");
writeFile.writeString("  if (logFile.exists()) {");
writeFile.writeString("      BufferedReader br = new BufferedReader(");
writeFile.writeString("                          new InputStreamReader(");
writeFile.writeString("                          new FileInputStream(filePath),\"shift-jis\"));");
writeFile.writeString("      String line;");
writeFile.writeString("      while ((line=br.readLine())!=null) {");
writeFile.writeString("        out.println(line);");
writeFile.writeString("      }");
writeFile.writeString("      br.close();");
writeFile.writeString("  } else {");
writeFile.writeString("      out.println(\"ログファイルが存在しません\");");
writeFile.writeString("  }");
writeFile.writeString("}");
writeFile.writeString("%>");
writeFile.writeString("  <br>");
writeFile.writeString("  <br>");
writeFile.writeString("  </div>");
writeFile.writeString("<div align=\"center\">[<a href=\"javascript:history.back()\">検索画面に戻る</a>] </div><br><br>");
writeFile.writeString("<table width=\"100%\" cellspacing=\"0\" cellpadding=\"3\" border=\"0\" bgcolor=\"#666666\" align=\"center\">");
writeFile.writeString("");
writeFile.writeString("  <tr>");
writeFile.writeString("    <td align=\"center\">　</td>");
writeFile.writeString("  </tr>");
writeFile.writeString("</table>");
writeFile.writeString("<div align=\"center\"><br>");
writeFile.writeString("  <!-- 著作権表示（削除改変不可）-->");
//writeFile.writeString("  <a href=\"http://www.hellohiro.com/\" target=\"_top\">Hello JSP BBS F</a> </div>");
writeFile.writeString("</body>");
writeFile.writeString("</html>");
writeFile.writeString("<%");
writeFile.writeString("} // end if");
writeFile.writeString("%>");
writeFile.writeString("<%!");
writeFile.writeString("/**");
writeFile.writeString(" * ファイルの拡張子のチェック");
writeFile.writeString(" */");
writeFile.writeString("private boolean fileExtensionCheck(String extension) {");
writeFile.writeString("  for (int i=0;i<EXTENSION_LIST.length;i++) {");
writeFile.writeString("    if (EXTENSION_LIST[i].equals(extension)) {");
writeFile.writeString("      return true;");
writeFile.writeString("    }");
writeFile.writeString("  }");
writeFile.writeString("  return false;");
writeFile.writeString("}");
writeFile.writeString("/**");
writeFile.writeString(" * クッキーを発行");
writeFile.writeString(" */");
writeFile.writeString("private void addCookie(String[] cookieNames,");
writeFile.writeString("                       Hashtable params,");
writeFile.writeString("                       HttpServletResponse response,");
writeFile.writeString("                       int expiry) {");
writeFile.writeString("  String name = removeTag((String)params.get(\"name\"));");
writeFile.writeString("  name = replace(name , \"&nbsp;\" , \" \");");
writeFile.writeString("  params.put(\"name\" , name);");
writeFile.writeString("  String url = (String)params.get(\"url\");");
writeFile.writeString("  if (url!=null) {");
writeFile.writeString("    url = removeTag(url);");
writeFile.writeString("    if (url.equals(\"\")) {");
writeFile.writeString("      url = \"http://\";");
writeFile.writeString("    }");
writeFile.writeString("    params.put(\"url\" , url);");
writeFile.writeString("  }");
writeFile.writeString("  try {");
writeFile.writeString("    for (int i=0;i<cookieNames.length;i++) {");
writeFile.writeString("      String val = (String)params.get(cookieNames[i]);");
writeFile.writeString("      if (val!=null) {");
writeFile.writeString("        Cookie cookie = new Cookie(cookieNames[i] , URLEncoder.encode(val,\"shift-jis\"));");
writeFile.writeString("        cookie.setMaxAge(expiry);");
writeFile.writeString("        response.addCookie(cookie);");
writeFile.writeString("      }");
writeFile.writeString("    }");
writeFile.writeString("  } catch (Exception e) {");
writeFile.writeString("    e.printStackTrace();");
writeFile.writeString("  }");
writeFile.writeString("}");
writeFile.writeString("/**");
writeFile.writeString(" * クッキーを取得");
writeFile.writeString(" */");
writeFile.writeString("private Hashtable getCookie(String[] cookieNames, Hashtable params , HttpServletRequest request) {");
writeFile.writeString("  Hashtable cookieTable = new Hashtable();");
writeFile.writeString("  boolean needcookie = true;");
writeFile.writeString("  for (int i=0;i<cookieNames.length;i++) {");
writeFile.writeString("    String param = (String)params.get(cookieNames[i]);");
writeFile.writeString("    if (param==null) {");
writeFile.writeString("      param = \"\";");
writeFile.writeString("    } else {");
writeFile.writeString("      if (cookieNames[i].equals(\"name\")) {");
writeFile.writeString("        needcookie = false;");
writeFile.writeString("      }");
writeFile.writeString("    }");
writeFile.writeString("    cookieTable.put(cookieNames[i] , param);");
writeFile.writeString("  }");
writeFile.writeString("  String url = (String)cookieTable.get(\"url\");");
writeFile.writeString("  if (url==null || url.equals(\"\")) {");
writeFile.writeString("    url = \"http://\";");
writeFile.writeString("  }");
writeFile.writeString("  cookieTable.put(\"url\" , url);");
writeFile.writeString("  if (needcookie) {");
writeFile.writeString("    try {");
writeFile.writeString("      Cookie[] cookies = request.getCookies();");
writeFile.writeString("      if (cookies!=null) {");
writeFile.writeString("        for (int i=0;i<cookies.length;i++) {");
writeFile.writeString("          cookieTable.put(cookies[i].getName() , URLDecoder.decode(cookies[i].getValue(),\"shift-jis\"));");
writeFile.writeString("        }");
writeFile.writeString("      }");
writeFile.writeString("    } catch (Exception e) {");
writeFile.writeString("      e.printStackTrace();");
writeFile.writeString("    }");
writeFile.writeString("  }");
writeFile.writeString("  return cookieTable;");
writeFile.writeString("}");
writeFile.writeString("/**");
writeFile.writeString(" * パラメーターチェック");
writeFile.writeString(" */");
writeFile.writeString("private String paramCheck(String mode , Hashtable params , Hashtable mailData) {");
writeFile.writeString("  if (mode.equals(MODE_REGIST)) { // 登録");
writeFile.writeString("    String name = (String)params.get(\"name\");");
writeFile.writeString("    String email = (String)params.get(\"email\");");
writeFile.writeString("    String subject = (String)params.get(\"subject\");");
writeFile.writeString("    String comment = (String)params.get(\"comment\");");
writeFile.writeString("    String url = (String)params.get(\"url\");");
writeFile.writeString("");
writeFile.writeString("    if (name==null || name.equals(\"\")) {");
writeFile.writeString("      return \"名前が入力されていません\";");
writeFile.writeString("    }");
writeFile.writeString("    if (comment== null || comment.equals(\"\")) {");
writeFile.writeString("      return \"コメントが入力されていません\";");
writeFile.writeString("    }");
writeFile.writeString("    if (email!=null && !email.equals(\"\")) {");
writeFile.writeString("      if (!emailCheck(email)) {");
writeFile.writeString("        return \"Ｅメールが正しくありません\";");
writeFile.writeString("      }");
writeFile.writeString("    }");
writeFile.writeString("    if (subject== null || subject.equals(\"\")) {");
writeFile.writeString("      subject = \"無題\";");
writeFile.writeString("    }");
writeFile.writeString("    if (SEND_MAIL) {");
writeFile.writeString("      mailData.put(\"o_name\" , name);");
writeFile.writeString("      mailData.put(\"o_email\" , email);");
writeFile.writeString("      mailData.put(\"o_subject\" , subject);");
writeFile.writeString("      mailData.put(\"o_comment\" , comment);");
writeFile.writeString("      mailData.put(\"o_url\" , url);");
writeFile.writeString("    }");
writeFile.writeString("");
writeFile.writeString("    name = htmlEncode(name);");
writeFile.writeString("    email = htmlEncode(email);");
writeFile.writeString("    subject = htmlEncode(subject);");
writeFile.writeString("    comment = htmlEncode(comment);");
writeFile.writeString("    comment = crlf2br(comment);");
writeFile.writeString("    comment = replace(comment,\"\\t\",\"&nbsp;&nbsp;&nbsp;&nbsp;\");");
writeFile.writeString("    if (URL_AUTO_LINK) {");
writeFile.writeString("      comment = urlAutoLink(comment);");
writeFile.writeString("    }");
writeFile.writeString("    ");
writeFile.writeString("    url = htmlEncode(url);");
writeFile.writeString("    if (url!=null && !url.equals(\"http://\") && url.startsWith(\"http://\")) {");
writeFile.writeString("      url = \"<p><a href=\\\"\" + url + \"\\\" target='_blank'>\" + url + \"</a>\";");
writeFile.writeString("    } else {");
writeFile.writeString("      url = \"\";");
writeFile.writeString("      if (SEND_MAIL) {");
writeFile.writeString("        mailData.put(\"o_url\" , url);");
writeFile.writeString("      }");
writeFile.writeString("    }");
writeFile.writeString("    name = \"<b>\" + name + \"</b>\";");
writeFile.writeString("    if (email!=null && !email.equals(\"\")) {");
writeFile.writeString("      name = \"<a href=\\\"mailto:\" + email + \"\\\">\" + name + \"</a>\";");
writeFile.writeString("    }");
writeFile.writeString("");
writeFile.writeString("    params.put(\"name\" , name);");
writeFile.writeString("    params.put(\"email\" , email);");
writeFile.writeString("    params.put(\"subject\" , subject);");
writeFile.writeString("    params.put(\"comment\" , comment);");
writeFile.writeString("    params.put(\"url\" , url);");
writeFile.writeString("  } else if (mode.equals(MODE_USER_DEL)) { // 記事削除");
writeFile.writeString("    String no = (String)params.get(\"no\");");
writeFile.writeString("    String delpasswd = (String)params.get(\"delpasswd\");");
writeFile.writeString("    if (/*(no==null || no.equals(\"\")) ||");
writeFile.writeString("        (delpasswd==null || delpasswd.equals(\"\"))*/false) {");
writeFile.writeString("      return \"記事Noまたは削除キーが入力されていません\";");
writeFile.writeString("    }");
writeFile.writeString("  }");
writeFile.writeString("  return null;");
writeFile.writeString("}");
writeFile.writeString("/**");
writeFile.writeString(" * メールアドレスをチェック");
writeFile.writeString(" */");
writeFile.writeString("private boolean emailCheck(String email) {");
writeFile.writeString("  if(email.indexOf('@')==-1 || email.indexOf('.')==-1) {");
writeFile.writeString("    return false;");
writeFile.writeString("  }");
writeFile.writeString("  return true;");
writeFile.writeString("}");
writeFile.writeString("/**");
writeFile.writeString(" * パラメーターの値を適切に変換");
writeFile.writeString(" */");
writeFile.writeString("private String toSJIS(String input) {");
writeFile.writeString("  try {");
writeFile.writeString("    String charsetName = \"iso-8859-1\";");
writeFile.writeString("    if (TOMCAT3) {");
writeFile.writeString("      charsetName = \"\";");
writeFile.writeString("    }");
writeFile.writeString("    input = (new String(input.getBytes(charsetName),\"JISAutoDetect\")).trim();");
writeFile.writeString("  } catch (UnsupportedEncodingException e) {");
writeFile.writeString("  }");
writeFile.writeString("  return input;");
writeFile.writeString("}");
writeFile.writeString("/**");
writeFile.writeString(" * HTMLエンコード");
writeFile.writeString(" */");
writeFile.writeString("private String htmlEncode(String input) {");
writeFile.writeString("  if (input==null) {");
writeFile.writeString("    return input;");
writeFile.writeString("  }");
writeFile.writeString("  StringBuffer buf = new StringBuffer();");
writeFile.writeString("  char[] c = input.toCharArray();");
writeFile.writeString("  for (int i=0; i < c.length; i++) {");
writeFile.writeString("    switch (c[i]) {");
writeFile.writeString("      case '<':");
writeFile.writeString("        buf.append(\"&lt;\");");
writeFile.writeString("        break;");
writeFile.writeString("      case '>':");
writeFile.writeString("        buf.append(\"&gt;\");");
writeFile.writeString("        break;");
writeFile.writeString("      case '\"':");
writeFile.writeString("        buf.append(\"&quot;\");");
writeFile.writeString("        break;");
writeFile.writeString("      case ' ':");
writeFile.writeString("        buf.append(\"&nbsp;\");");
writeFile.writeString("        break;");
writeFile.writeString("      default:");
writeFile.writeString("        buf.append(c[i]);");
writeFile.writeString("    }");
writeFile.writeString("  }");
writeFile.writeString("  return buf.toString();");
writeFile.writeString("}");
writeFile.writeString("/**");
writeFile.writeString(" * 文字列を置換");
writeFile.writeString(" */");
writeFile.writeString("private String replace(String input, String pattern, String replace) {");
writeFile.writeString("  int index = input.indexOf(pattern);");
writeFile.writeString("  if (index==-1) {");
writeFile.writeString("    return input;");
writeFile.writeString("  }");
writeFile.writeString("  StringBuffer sb = new StringBuffer();");
writeFile.writeString("  sb.append(input.substring(0,index) + replace);");
writeFile.writeString("  int plen = pattern.length();");
writeFile.writeString("  if (index + plen < input.length()) {");
writeFile.writeString("    String s = input.substring(index + plen);");
writeFile.writeString("    sb.append(replace(s , pattern , replace));");
writeFile.writeString("  }");
writeFile.writeString("  return sb.toString();");
writeFile.writeString("}");
writeFile.writeString("/**");
writeFile.writeString(" * 文字列が長い場合省略します");
writeFile.writeString(" */");
writeFile.writeString("private String omitString(String input, int len) {");
writeFile.writeString("  if (input.length()<=len) {");
writeFile.writeString("    return input;");
writeFile.writeString("  }");
writeFile.writeString("  return input.substring(0,len) + \"．．\";");
writeFile.writeString("}");
writeFile.writeString("/**");
writeFile.writeString(" * カラー選択処理");
writeFile.writeString(" */");
writeFile.writeString("private void colorCheck(Hashtable colorHTML , String color) {");
writeFile.writeString("  if (color==null || color.equals(\"\")) {");
writeFile.writeString("    color = COLOR_LIST[0];");
writeFile.writeString("  }");
writeFile.writeString("  StringBuffer sbChecked = new StringBuffer();");
writeFile.writeString("  StringBuffer sbSelected = new StringBuffer();");
writeFile.writeString("  for (int i=0;i<COLOR_LIST.length;i++) {");
writeFile.writeString("    if (COLOR_LIST[i].equals(color)) {");
writeFile.writeString("      sbChecked.append(\"<input type=radio value=\" + COLOR_LIST[i] + \" name=color checked><font color=\\\"#\" + COLOR_LIST[i] + \"\\\">■</font>\" + \"\\n\");");
writeFile.writeString("      sbSelected.append(\"<option value=\\\"\" + COLOR_LIST[i] + \"\\\" selected>\" + COLOR_NAME_LIST[i] + \"\\n\");");
writeFile.writeString("    } else {");
writeFile.writeString("      sbChecked.append(\"<input type=radio value=\" + COLOR_LIST[i] + \" name=color><font color=\\\"#\" + COLOR_LIST[i] + \"\\\">■</font>\" + \"\\n\");");
writeFile.writeString("      sbSelected.append(\"<option value=\\\"\" + COLOR_LIST[i] + \"\\\">\" + COLOR_NAME_LIST[i] + \"\\n\");");
writeFile.writeString("    }");
writeFile.writeString("  }");
writeFile.writeString("  colorHTML.put(\"colorcheck\", sbChecked.toString());");
writeFile.writeString("  colorHTML.put(\"coloroptions\" , sbSelected.toString());");
writeFile.writeString("}");
writeFile.writeString("/**");
writeFile.writeString(" * URL自動リンク処理");
writeFile.writeString(" */");
writeFile.writeString("private String urlAutoLink(String input) {");
writeFile.writeString("  String urlString = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_%/.?+&=\";");
writeFile.writeString("  int start = input.indexOf(\"http://\");");
writeFile.writeString("  int len = \"http://\".length();");
writeFile.writeString("  if (true/*start==-1*/) {");
writeFile.writeString("    return input;");
writeFile.writeString("  }");
writeFile.writeString("  int index;");
writeFile.writeString("  for (index=start + len;index<input.length();index++) {");
writeFile.writeString("   if (urlString.indexOf(input.charAt(index))==-1) {");
writeFile.writeString("    break;");
writeFile.writeString("   }");
writeFile.writeString("  }");
writeFile.writeString("  String url = input.substring(start , index);");
writeFile.writeString("  String link = \"<a href=\\\"\" + url + \"\\\" target=\\\"_blank\\\">\" + url + \"</a>\";");
writeFile.writeString("  StringBuffer sb = new StringBuffer();");
writeFile.writeString("  sb.append(input.substring(0, start)).append(link);");
writeFile.writeString("  if (index < input.length()) {");
writeFile.writeString("    sb.append(urlAutoLink(input.substring(index)));");
writeFile.writeString("  }");
writeFile.writeString("  return sb.toString();");
writeFile.writeString("}");
writeFile.writeString("// 配列の中を検索します");
writeFile.writeString("private boolean searchArray(String[] array, String search) {");
writeFile.writeString("  for (int i=0;i<array.length;i++) {");
writeFile.writeString("    if (array[i].equals(search)) {");
writeFile.writeString("      return true;");
writeFile.writeString("    }");
writeFile.writeString("  }");
writeFile.writeString("  return false;");
writeFile.writeString("}");
writeFile.writeString("// 改行コード(CrLf,Cr,Lf)→\"<br>\"に変換");
writeFile.writeString("private String crlf2br(String value) {");
writeFile.writeString("  if (value.indexOf(\"\\r\")==-1 && value.indexOf(\"\\n\")==-1) {");
writeFile.writeString("    return value;");
writeFile.writeString("  }");
writeFile.writeString("  final String BR = \"<br>\";");
writeFile.writeString("  StringBuffer sb = new StringBuffer();");
writeFile.writeString("  char c;");
writeFile.writeString("  int flagCr=-2;");
writeFile.writeString("  int len = value.length();");
writeFile.writeString("  for (int i=0;i<len;i++) {");
writeFile.writeString("    c = value.charAt(i);");
writeFile.writeString("    if (c=='\\r') {");
writeFile.writeString("      flagCr=i;");
writeFile.writeString("      sb.append(BR);");
writeFile.writeString("    } else if (c=='\\n') {");
writeFile.writeString("      if (i-flagCr==1) {");
writeFile.writeString("        sb.delete(sb.length()-BR.length(), sb.length());");
writeFile.writeString("      }");
writeFile.writeString("      sb.append(BR);");
writeFile.writeString("    } else {");
writeFile.writeString("      sb.append(c);");
writeFile.writeString("    }");
writeFile.writeString("  }");
writeFile.writeString("  return sb.toString();");
writeFile.writeString("}");
writeFile.writeString("/**");
writeFile.writeString(" * タグを取り除きます");
writeFile.writeString(" */");
writeFile.writeString("private String removeTag(String input) {");
writeFile.writeString("  if (input==null) {");
writeFile.writeString("    return \"\";");
writeFile.writeString("  }");
writeFile.writeString("  int index = input.indexOf(\"<\");");
writeFile.writeString("  if (index==-1) {");
writeFile.writeString("    return input;");
writeFile.writeString("  }");
writeFile.writeString("  while (index!=-1) {");
writeFile.writeString("    int endTagIndex = input.indexOf(\">\" , index);");
writeFile.writeString("    if (endTagIndex==-1) {");
writeFile.writeString("      break;");
writeFile.writeString("    }");
writeFile.writeString("    input = input.substring(0,index) + input.substring(endTagIndex + 1);");
writeFile.writeString("    index = input.indexOf(\"<\");");
writeFile.writeString("  }");
writeFile.writeString("  return input;");
writeFile.writeString("}");
writeFile.writeString("");
writeFile.writeString("/**");
writeFile.writeString(" * メール送信");
writeFile.writeString(" */");
writeFile.writeString("private boolean sendMail(Hashtable params , Hashtable mailData) {");
writeFile.writeString("  String cmd = SENDMAIL_PATH + \" -t\";");
writeFile.writeString("  String fileName = (String)params.get(\"originalfilename\");");
writeFile.writeString("  String fileExist = \"有\";");
writeFile.writeString("  if (fileName==null) {");
writeFile.writeString("    fileExist = \"無\";");
writeFile.writeString("  }");
writeFile.writeString("  String param = \"From: \" + ADMIN_MAIL + \"\\n\" +");
writeFile.writeString("                 \"To: \" + ADMIN_MAIL + \"\\n\" +");
writeFile.writeString("                 \"Subject: [\" + TITLE + \" : \" + (String)params.get(\"no\") + \"] \" +");
writeFile.writeString("                 (String)params.get(\"subject\") + \"\\n\" +");
writeFile.writeString("                 \"Content-type: text/plain; charset=ISO-2022-JP\\n\" +");
writeFile.writeString("                 \"X-Mailer: Hello JSP BBS F\\n\\n\" +");
writeFile.writeString("                 \"--------------------------------------------------------\\n\" +");
writeFile.writeString("                 \"投稿日時：\" + (String)params.get(\"date\") + \"\\n\" +");
writeFile.writeString("                 \"ホスト名：\" + (String)params.get(\"host\") + \"\\n\" +");
writeFile.writeString("                 \"ブラウザ：\" + (String)params.get(\"user-agent\") + \"\\n\" +");
writeFile.writeString("                 \"\\n\" +");
writeFile.writeString("                 \"投稿者名：\" + (String)mailData.get(\"o_name\") + \"\\n\" +");
writeFile.writeString("                 \"Ｅメール：\" + (String)mailData.get(\"o_email\") + \"\\n\" +");
writeFile.writeString("                 \"ＵＲＬ：\" + (String)mailData.get(\"o_url\") + \"\\n\" +");
writeFile.writeString("                 \"添付ファイル：\" + fileExist + \"\\n\" +");
writeFile.writeString("                 \"タイトル：\" + (String)mailData.get(\"o_subject\") + \"\\n\" +");
writeFile.writeString("                 \"投稿記事：\\n\\n\" +");
writeFile.writeString("                 (String)mailData.get(\"o_comment\") + \"\\n\" +");
writeFile.writeString("                 \"--------------------------------------------------------\\n\";");
writeFile.writeString("");
writeFile.writeString("  try {");
writeFile.writeString("    Process process = Runtime.getRuntime().exec(cmd);");
writeFile.writeString("    OutputStream out = process.getOutputStream();");
writeFile.writeString("    out.write(param.getBytes(\"ISO-2022-JP\"));");
writeFile.writeString("    out.flush();");
writeFile.writeString("    out.close();");
writeFile.writeString("    return true;");
writeFile.writeString("  } catch (Exception e) {");
writeFile.writeString("    e.printStackTrace();");
writeFile.writeString("    return false;");
writeFile.writeString("  }");
writeFile.writeString("}");
writeFile.writeString("");
writeFile.writeString("/**");
writeFile.writeString(" * 過去ログの書き込み");
writeFile.writeString(" */");
writeFile.writeString("private void writePastLog(Hashtable params ,");
writeFile.writeString("                          String countPath ,");
writeFile.writeString("                          String pastDirPath,");
writeFile.writeString("                          int delCount) {");
writeFile.writeString("  synchronized (plock) {");
writeFile.writeString("    // 過去ログのカウントを取得");
writeFile.writeString("    int pastCount = 0;");
writeFile.writeString("    try {");
writeFile.writeString("      BufferedReader cin = new BufferedReader(new FileReader(countPath));");
writeFile.writeString("      String strCnt = cin.readLine();");
writeFile.writeString("      cin.close();");
writeFile.writeString("      pastCount = Integer.parseInt(strCnt);");
writeFile.writeString("    } catch (Exception e) {");
writeFile.writeString("    }");
writeFile.writeString("");
writeFile.writeString("    // 過去ログファイルのパスを取得");
writeFile.writeString("    String pastFilePath = pastDirPath + File.separator + pastCount + \".html\";");
writeFile.writeString("    // 過去ログ読み込み");
writeFile.writeString("    Vector logs = new Vector();");
writeFile.writeString("    try {");
writeFile.writeString("      File f = new File(pastDirPath);");
writeFile.writeString("      if (!f.isDirectory()) {");
writeFile.writeString("        f.mkdir();");
writeFile.writeString("      }");
writeFile.writeString("      BufferedReader pin = new BufferedReader(");
writeFile.writeString("                           new InputStreamReader(");
writeFile.writeString("                           new FileInputStream(pastFilePath),\"shift-jis\"));");
writeFile.writeString("      String line;");
writeFile.writeString("      while ((line=pin.readLine())!=null) {");
writeFile.writeString("        if (!line.equals(\"\")) {");
writeFile.writeString("          logs.add(line);");
writeFile.writeString("        }");
writeFile.writeString("      }");
writeFile.writeString("      if (logs.size()>2) {");
writeFile.writeString("        logs.remove(0);");
writeFile.writeString("        logs.remove(logs.size()-1);");
writeFile.writeString("      }");
writeFile.writeString("      pin.close();");
writeFile.writeString("    } catch (Exception e) {");
writeFile.writeString("    }");
writeFile.writeString("");
writeFile.writeString("    // 行数取得");
writeFile.writeString("    int lineCount = logs.size();");
writeFile.writeString("    // 最大行数のチェック");
writeFile.writeString("    if (lineCount >= MAX_PAST_LINE && delCount==0) {");
writeFile.writeString("      pastCount++;");
writeFile.writeString("      pastFilePath = pastDirPath + File.separator + pastCount + \".html\";");
writeFile.writeString("      logs.clear();");
writeFile.writeString("    }");
writeFile.writeString("");
writeFile.writeString("    // 過去ログの書き込み");
writeFile.writeString("    try {");
writeFile.writeString("      String no = (String)params.get(\"no\");");
writeFile.writeString("      String pno = (String)params.get(\"pno\");");
writeFile.writeString("");
writeFile.writeString("      String line = \"[\"+ no + \"] <font color=\" + SUBJECT_COLOR + \"><b>\" + (String)params.get(\"subject\") +");
writeFile.writeString("                    \"</b></font> 投稿者：\" + (String)params.get(\"name\") +");
writeFile.writeString("                    \" <small>投稿日:\" + (String)params.get(\"date\") +");
writeFile.writeString("                    \"</small><p><blockquote>\" + (String)params.get(\"comment\");");
writeFile.writeString("      if (params.get(\"filesystemname\")!=null)  {");
writeFile.writeString("        line += \"<br><br><b>添付ファイル：</b><a href=\\\"\" +FILE_DIR + \"/\" + (String)params.get(\"filesystemname\") + \"\\\" target='_blank'>\" + (String)params.get(\"originalfilename\") + \"</a>\";");
writeFile.writeString("      }");
writeFile.writeString("      line += \"<p>\" + (String)params.get(\"url\") + \"</blockquote><hr>\";");
writeFile.writeString("      if (!no.equals(pno)) {");
writeFile.writeString("        line = \"<blockquote>\" + line + \"</blockquote>\";");
writeFile.writeString("      }");
writeFile.writeString("      BufferedWriter pout = new BufferedWriter(");
writeFile.writeString("                          new OutputStreamWriter(");
writeFile.writeString("                          new FileOutputStream(pastFilePath),\"shift-jis\"));");
writeFile.writeString("      pout.write(\"<html><body>\\r\\n\");");
writeFile.writeString("      pout.write(line + \"\\r\\n\");");
writeFile.writeString("      lineCount = logs.size();");
writeFile.writeString("      for (int i=0;i<lineCount;i++) {");
writeFile.writeString("        pout.write((String)logs.get(i) + \"\\r\\n\");");
writeFile.writeString("      }");
writeFile.writeString("      pout.write(\"</body></html>\");");
writeFile.writeString("      pout.close();");
writeFile.writeString("");
writeFile.writeString("      BufferedWriter cout = new BufferedWriter(new FileWriter(countPath));");
writeFile.writeString("      cout.write(String.valueOf(pastCount));");
writeFile.writeString("      cout.close();");
writeFile.writeString("    } catch (Exception e) {");
writeFile.writeString("      e.printStackTrace();");
writeFile.writeString("    }");
writeFile.writeString("  }");
writeFile.writeString("}");
writeFile.writeString("/**");
writeFile.writeString(" * データの取得");
writeFile.writeString(" */");
writeFile.writeString("private Vector readData(String logPath , String no) {");
writeFile.writeString("  Vector dataList = new Vector();");
writeFile.writeString("  try {");
writeFile.writeString("    ObjectInputStream in = new ObjectInputStream(new FileInputStream(logPath));");
writeFile.writeString("    dataList = (Vector)in.readObject();");
writeFile.writeString("    in.close();");
writeFile.writeString("  } catch (Exception e) {");
writeFile.writeString("  }");
writeFile.writeString("  if (no!=null) { // 返信");
writeFile.writeString("    int size = dataList.size();");
writeFile.writeString("    Vector resList = new Vector();");
writeFile.writeString("    for (int i=0;i<size;i++) {");
writeFile.writeString("      Hashtable data = (Hashtable)dataList.get(i);");
writeFile.writeString("      if (((String)data.get(\"pno\")).equals(no)) {");
writeFile.writeString("        resList.add(data);");
writeFile.writeString("      }");
writeFile.writeString("    }");
writeFile.writeString("    if (resList.size()==0) {");
writeFile.writeString("      return null;");
writeFile.writeString("    }");
writeFile.writeString("    return resList;");
writeFile.writeString("  }");
writeFile.writeString("  return dataList;");
writeFile.writeString("}");
writeFile.writeString("/**");
writeFile.writeString(" * データの登録・削除");
writeFile.writeString(" */");
writeFile.writeString("private String registData(String");
writeFile.writeString("                          mode,");
writeFile.writeString("                          Hashtable params,");
writeFile.writeString("                          Hashtable mailData,");
writeFile.writeString("                          String countPath ,");
writeFile.writeString("                          String logPath,");
writeFile.writeString("                          String logCountPath,");
writeFile.writeString("                          String logDirPath) {");
writeFile.writeString("  synchronized (lock) {");
writeFile.writeString("    Vector dataList = new Vector();");
writeFile.writeString("    int newNo = 1;");
writeFile.writeString("    String name = \"\";");
writeFile.writeString("    String comment = \"\";");
writeFile.writeString("    // データ読み込み");
writeFile.writeString("    try {");
writeFile.writeString("      // 記事取得");
writeFile.writeString("      ObjectInputStream din = new ObjectInputStream(new FileInputStream(logPath));");
writeFile.writeString("      dataList = (Vector)din.readObject();");
writeFile.writeString("      din.close();");
writeFile.writeString("      // 記事番号取得");
writeFile.writeString("      BufferedReader cin = new BufferedReader(new FileReader(countPath));");
writeFile.writeString("      String strCnt = cin.readLine();");
writeFile.writeString("      cin.close();");
writeFile.writeString("      newNo = Integer.parseInt(strCnt) + 1;");
writeFile.writeString("    } catch (Exception e) {");
writeFile.writeString("    }");
writeFile.writeString("");
writeFile.writeString("    if (mode.equals(MODE_REGIST)) { /** 登録 **/");
writeFile.writeString("      int i;");
writeFile.writeString("      // 二重投稿かどうかのチェック");
writeFile.writeString("      for (i=0;i<dataList.size();i++) {");
writeFile.writeString("        // 最新の記事の名前とコメントを取得");
writeFile.writeString("        name = (String)((Hashtable)dataList.get(i)).get(\"name\");");
writeFile.writeString("        comment = (String)((Hashtable)dataList.get(i)).get(\"comment\");");
writeFile.writeString("        String thisFileName = (String)((Hashtable)dataList.get(i)).get(\"originalfilename\");");
writeFile.writeString("        if (thisFileName == null) {");
writeFile.writeString("          thisFileName = \"\";");
writeFile.writeString("        }");
writeFile.writeString("        String fileName = (String)params.get(\"originalfilename\");");
writeFile.writeString("        if (fileName == null) {");
writeFile.writeString("          fileName = \"\";");
writeFile.writeString("        }");
writeFile.writeString("");
writeFile.writeString("        if (((String)params.get(\"name\")).equals(name) &&");
writeFile.writeString("            ((String)params.get(\"comment\")).equals(comment) &&");
writeFile.writeString("            fileName.equals(thisFileName)) {");
writeFile.writeString("            return \"二重投稿は禁止です\";");
writeFile.writeString("        }");
writeFile.writeString("      }");
writeFile.writeString("");
writeFile.writeString("      // 記事番号を設定");
writeFile.writeString("      String no = String.valueOf(newNo);");
writeFile.writeString("      params.put(\"no\", no);");
writeFile.writeString("      int size = dataList.size();");
writeFile.writeString("      if (params.get(\"pno\")==null) { // 通常登録の場合");
writeFile.writeString("        if (size >= MAX) {");
writeFile.writeString("          // 親記事数を取得");
writeFile.writeString("          Hashtable data = (Hashtable)dataList.get(0);");
writeFile.writeString("          String pno = (String)data.get(\"pno\");");
writeFile.writeString("          int parentCount = 1;");
writeFile.writeString("          for (i=0;i<size;i++) {");
writeFile.writeString("            data = (Hashtable)dataList.get(i);");
writeFile.writeString("            String tmpPno = (String)data.get(\"pno\");");
writeFile.writeString("            if (!tmpPno.equals(pno)) {");
writeFile.writeString("              parentCount++;");
writeFile.writeString("            }");
writeFile.writeString("            pno = tmpPno;");
writeFile.writeString("          }");
writeFile.writeString("          // 最大保持親記事数のチェック");
writeFile.writeString("          if (parentCount >= MAX) {");
writeFile.writeString("            int delParentNum = parentCount - MAX + 1;");
writeFile.writeString("            data = (Hashtable)dataList.get(size-1);");
writeFile.writeString("            pno = (String)data.get(\"pno\");");
writeFile.writeString("            int delCount=0;");
writeFile.writeString("            for (i=size-1;i>0;i--) {");
writeFile.writeString("              data = (Hashtable)dataList.get(i);");
writeFile.writeString("              String tmpPno = (String)data.get(\"pno\");");
writeFile.writeString("              if (tmpPno.equals(pno)) {");
writeFile.writeString("                if (PAST_LOG) {");
writeFile.writeString("                  writePastLog((Hashtable)dataList.get(i),logCountPath,logDirPath,delCount++);");
writeFile.writeString("                }");
writeFile.writeString("                dataList.remove(i);");
writeFile.writeString("              } else {");
writeFile.writeString("                if (--delParentNum<=0) {");
writeFile.writeString("                  break;");
writeFile.writeString("                } else {");
writeFile.writeString("                  if (PAST_LOG) {");
writeFile.writeString("                    writePastLog((Hashtable)dataList.get(i),logCountPath,logDirPath,delCount++);");
writeFile.writeString("                  }");
writeFile.writeString("                  dataList.remove(i);");
writeFile.writeString("                  pno = tmpPno;");
writeFile.writeString("                }");
writeFile.writeString("              }");
writeFile.writeString("            }");
writeFile.writeString("          }");
writeFile.writeString("        }");
writeFile.writeString("");
writeFile.writeString("        params.put(\"pno\",no);");
writeFile.writeString("        // リストに追加");
writeFile.writeString("        dataList.add(0,params);");
writeFile.writeString("      } else { // 返信からの場合");
writeFile.writeString("        String pno = (String)params.get(\"pno\");");
writeFile.writeString("        boolean exist = false;");
writeFile.writeString("        Vector sortData = new Vector();");
writeFile.writeString("        for (i=0;i<size;i++) {");
writeFile.writeString("          Hashtable data = (Hashtable)dataList.get(i);");
writeFile.writeString("          String tmpPno = (String)data.get(\"pno\");");
writeFile.writeString("          // 親記事が存在する場合");
writeFile.writeString("          if (tmpPno.equals(pno)) {");
writeFile.writeString("            exist = true;");
writeFile.writeString("            // トップソートあり");
writeFile.writeString("            if (TOP_SORT) {");
writeFile.writeString("              dataList.remove(i--);");
writeFile.writeString("              size--;");
writeFile.writeString("              sortData.add(data);");
writeFile.writeString("            }");
writeFile.writeString("          } else {");
writeFile.writeString("            if (exist) {");
writeFile.writeString("              break;");
writeFile.writeString("            }");
writeFile.writeString("          }");
writeFile.writeString("        }");
writeFile.writeString("        if (!exist) {");
writeFile.writeString("          return \"記事が既に削除されています\";");
writeFile.writeString("        }");
writeFile.writeString("        if (TOP_SORT) { // トップソートあり");
writeFile.writeString("          sortData.add(params);");
writeFile.writeString("          dataList.addAll(0, sortData);");
writeFile.writeString("        } else { // トップソートなし");
writeFile.writeString("          dataList.add(i,params);");
writeFile.writeString("        }");
writeFile.writeString("      }");
writeFile.writeString("    } else if (mode.equals(MODE_USER_DEL)) { /** ユーザー記事削除 **/");
writeFile.writeString("      String delNo = (String)params.get(\"no\");");
writeFile.writeString("      String delPasswd = (String)params.get(\"delpasswd\");");
writeFile.writeString("      int size = dataList.size();");
writeFile.writeString("      boolean delete = false;");
writeFile.writeString("      for (int i=size-1;i>=0;i--) {");
writeFile.writeString("        Hashtable data = (Hashtable)dataList.get(i);");
writeFile.writeString("        String tmpNo = (String)data.get(\"no\");");
writeFile.writeString("        String tmpPasswd = (String)data.get(\"passwd\");");
writeFile.writeString("        if (tmpNo.equals(delNo)) {");
writeFile.writeString("          if (/*tmpPasswd!=null && tmpPasswd.equals(delPasswd) && !tmpPasswd.equals(\"\")*/true) {");
writeFile.writeString("            delete = true;");
writeFile.writeString("            dataList.remove(i);");
writeFile.writeString("            // ファイルを削除します");
writeFile.writeString("            String filePath = (String)data.get(\"filesystempath\");");
writeFile.writeString("            if (filePath!=null) {");
writeFile.writeString("              File file = new File(filePath);");
writeFile.writeString("              if (file.exists()) {");
writeFile.writeString("                file.delete();");
writeFile.writeString("              }");
writeFile.writeString("            }");
writeFile.writeString("          } else {");
writeFile.writeString("            return \"削除キーがちがいます\";");
writeFile.writeString("          }");
writeFile.writeString("          break;");
writeFile.writeString("        }");
writeFile.writeString("      }");
writeFile.writeString("      // 返信を削除します");
writeFile.writeString("      if (delete) {");
writeFile.writeString("        size = dataList.size();");
writeFile.writeString("        for (int i=size-1;i>=0;i--) {");
writeFile.writeString("          Hashtable data = (Hashtable)dataList.get(i);");
writeFile.writeString("          String tmpPno = (String)data.get(\"pno\");");
writeFile.writeString("          if (tmpPno.equals(delNo)) {");
writeFile.writeString("            dataList.remove(i);");
writeFile.writeString("            // ファイルを削除します");
writeFile.writeString("            String filePath = (String)data.get(\"filesystempath\");");
writeFile.writeString("            if (filePath!=null) {");
writeFile.writeString("              File file = new File(filePath);");
writeFile.writeString("              if (file.exists()) {");
writeFile.writeString("                file.delete();");
writeFile.writeString("              }");
writeFile.writeString("            }");
writeFile.writeString("          }");
writeFile.writeString("        }");
writeFile.writeString("      }");
writeFile.writeString("    } else if (mode.equals(MODE_ADMIN)) { /** 管理者記事削除 **/");
writeFile.writeString("      String passwd = (String)params.get(\"passwd\");");
writeFile.writeString("      if (passwd!=null && passwd.equals(ADMIN_PASSWD)) {");
writeFile.writeString("        String[] del = (String[])params.get(\"del\");");
writeFile.writeString("        int size = dataList.size();");
writeFile.writeString("        Vector plist = new Vector();");
writeFile.writeString("        for (int i=size-1;i>=0;i--) {");
writeFile.writeString("          Hashtable data = (Hashtable)dataList.get(i);");
writeFile.writeString("          String tmpNo = (String)(data.get(\"no\"));");
writeFile.writeString("          if (searchArray(del, tmpNo)) {");
writeFile.writeString("            String tmpPno = (String)(data.get(\"pno\"));");
writeFile.writeString("            if (tmpNo.equals(tmpPno)) {");
writeFile.writeString("              plist.add(tmpPno);");
writeFile.writeString("            }");
writeFile.writeString("            dataList.remove(i);");
writeFile.writeString("            // ファイルを削除します");
writeFile.writeString("            String filePath = (String)(data.get(\"filesystempath\"));");
writeFile.writeString("            if (filePath!=null) {");
writeFile.writeString("              File file = new File(filePath);");
writeFile.writeString("              if (file.exists()) {");
writeFile.writeString("                file.delete();");
writeFile.writeString("              }");
writeFile.writeString("            }");
writeFile.writeString("          }");
writeFile.writeString("        }");
writeFile.writeString("        // 返信記事を削除");
writeFile.writeString("        if (plist.size()>0) {");
writeFile.writeString("          del = new String[plist.size()];");
writeFile.writeString("          plist.toArray(del);");
writeFile.writeString("          size = dataList.size();");
writeFile.writeString("          for (int i=size-1;i>=0;i--) {");
writeFile.writeString("            Hashtable data = (Hashtable)dataList.get(i);");
writeFile.writeString("            String tmpPno = (String)(data.get(\"pno\"));");
writeFile.writeString("            if (searchArray(del, tmpPno)) {");
writeFile.writeString("              dataList.remove(i);");
writeFile.writeString("              // ファイルを削除します");
writeFile.writeString("              String filePath = (String)(data.get(\"filesystempath\"));");
writeFile.writeString("              if (filePath!=null) {");
writeFile.writeString("                File file = new File(filePath);");
writeFile.writeString("                if (file.exists()) {");
writeFile.writeString("                  file.delete();");
writeFile.writeString("                }");
writeFile.writeString("              }");
writeFile.writeString("            }");
writeFile.writeString("          }");
writeFile.writeString("        }");
writeFile.writeString("      }");
writeFile.writeString("    }");
writeFile.writeString("");
writeFile.writeString("    // データ書き込み");
writeFile.writeString("    try {");
writeFile.writeString("      File logFile = new File(logPath);");
writeFile.writeString("      if (logFile.exists() && !logFile.canWrite()) {");
writeFile.writeString("        return \"ログファイルに書き込み権限がありません\";");
writeFile.writeString("      }");
writeFile.writeString("      File countFile = new File(countPath);");
writeFile.writeString("      if (countFile.exists() && !countFile.canWrite()) {");
writeFile.writeString("        return \"カウントファイルに書き込み権限がありません\";");
writeFile.writeString("      }");
writeFile.writeString("      // 記事書き込み");
writeFile.writeString("      ObjectOutputStream dout = new ObjectOutputStream(new FileOutputStream(logFile));");
writeFile.writeString("      dout.writeObject(dataList);");
writeFile.writeString("      dout.close();");
writeFile.writeString("      // 記事番号を書き込み");
writeFile.writeString("      if (mode.equals(MODE_REGIST)) {");
writeFile.writeString("        BufferedWriter cout = new BufferedWriter(new FileWriter(countFile));");
writeFile.writeString("        cout.write(String.valueOf(newNo));");
writeFile.writeString("        cout.close();");
writeFile.writeString("        // メール送信");
writeFile.writeString("        if (SEND_MAIL) {");
writeFile.writeString("          if (!sendMail(params , mailData)) {");
writeFile.writeString("            return \"メール送信時にエラーが発生しました\";");
writeFile.writeString("          }");
writeFile.writeString("        }");
writeFile.writeString("      }");
writeFile.writeString("    } catch (Exception e) {");
writeFile.writeString("      return \"書き込み時にエラーが発生しました\";");
writeFile.writeString("    }");
writeFile.writeString("    return null;");
writeFile.writeString("  }");
writeFile.writeString("}");
writeFile.writeString("");
writeFile.writeString("/**");
writeFile.writeString(" * エラー出力");
writeFile.writeString(" */");
writeFile.writeString("private void showErrorHTML(JspWriter out, String msg , String back) throws IOException {");
writeFile.writeString("  out.println(\"<html>\");");
writeFile.writeString("  out.println(\"<head>\");");
writeFile.writeString("  out.println(\"<meta http-equiv=\\\"Content-type\\\" CONTENT=\\\"text/html; charset=shift-jis\\\">\");");
writeFile.writeString("  out.println(\"<title>エラー</title>\");");
writeFile.writeString("  out.println(\"<style type=\\\"text/css\\\">\");");
writeFile.writeString("  out.println(\"<!--\");");
writeFile.writeString("  out.println(\"body { font-size:10pt }\");");
writeFile.writeString("  out.println(\"-->\");");
writeFile.writeString("  out.println(\"</style>\");");
writeFile.writeString("  out.println(\"</head>\");");
writeFile.writeString("  out.println(\"<body bgcolor=\\\"#FFFFFF\\\">\");");
writeFile.writeString("  out.println(\"<hr width=\\\"350\\\" noshade size=\\\"1\\\">\");");
writeFile.writeString("  out.println(\"<center>\");");
writeFile.writeString("  out.println(\"<h4>エラー</h4>\");");
writeFile.writeString("  out.println(\"<p><font color='#CC0000'>\" + msg + \"</font>\");");
writeFile.writeString("  out.println(\"<p>[<a href=\\\"\" + back + \"\\\">戻る</a>]\");");
writeFile.writeString("  out.println(\"</center>\");");
writeFile.writeString("  out.println(\"<hr width=\\\"350\\\" noshade size=\\\"1\\\">\");");
writeFile.writeString("  out.println(\"</body>\");");
writeFile.writeString("  out.println(\"</html>\");");
writeFile.writeString("}");
writeFile.writeString("%>");
writeFile.writeClose();
}catch (Exception a){}
}
}

/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.nec.corestudy.amf.NamfUecmCLI.api;

import com.nec.corestudy.amf.NamfUecmCLI.model.Amf3GppAccessRegistration;
import com.nec.corestudy.amf.NamfUecmCLI.model.Amf3GppAccessRegistrationModification;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-05-15T18:19:23.613+09:00")

@Api(value = "Amf3gppAccess", description = "the Amf3gppAccess API")
public interface Amf3gppAccessApi {

    @ApiOperation(value = "amf-3gpp-access.", nickname = "getAmf3gppAccess", notes = "see 29.503 6.2.3.2", response = Amf3GppAccessRegistration.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK.", response = Amf3GppAccessRegistration.class) })
    @RequestMapping(value = "/{ueId}/registrations/amf-3gpp-access",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.GET)
    ResponseEntity<Amf3GppAccessRegistration> getAmf3gppAccess(@ApiParam(value = "ueId. ",required=true) @PathVariable("ueId") String ueId,@ApiParam(value = "")  @RequestParam(value = "supportedFeatures", required = false) String supportedFeatures);


    @ApiOperation(value = "amf-3gpp-access.", nickname = "patchAmf3gppAccess", notes = "see 29.503 6.2.3.2", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content.") })
    @RequestMapping(value = "/{ueId}/registrations/amf-3gpp-access",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PATCH)
    ResponseEntity<Void> patchAmf3gppAccess(@ApiParam(value = "ueId. ",required=true) @PathVariable("ueId") String ueId,@ApiParam(value = "The AMF registration for 3GPP access is replaced with the received information" ,required=true )   @RequestBody Amf3GppAccessRegistrationModification amf3GppAccessRegistrationModification);


    @ApiOperation(value = "amf-3gpp-access.", nickname = "putAmf3gppAccess", notes = "see 29.503 6.2.3.2", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content.") })
    @RequestMapping(value = "/{ueId}/registrations/amf-3gpp-access",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> putAmf3gppAccess(@ApiParam(value = "ueId. ",required=true) @PathVariable("ueId") String ueId,@ApiParam(value = "The AMF registration for 3GPP access is replaced with the received information" ,required=true )   @RequestBody Amf3GppAccessRegistration amf3gppAccessRegistration);

}

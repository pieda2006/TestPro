/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.nec.corestudy.smf.Controller.Nsmf_PDUSession.api;

import com.nec.corestudy.smf.Controller.Nsmf_PDUSession.model.ProblemDetails;
import com.nec.corestudy.smf.Controller.Nsmf_PDUSession.model.SmContextCreateData;
import com.nec.corestudy.smf.Controller.Nsmf_PDUSession.model.SmContextCreatedData;
import com.nec.corestudy.smf.Controller.Nsmf_PDUSession.model.SmContextQueriedData;
import com.nec.corestudy.smf.Controller.Nsmf_PDUSession.model.SmContextReleaseData;
import com.nec.corestudy.smf.Controller.Nsmf_PDUSession.model.SmContextReleasedData;
import com.nec.corestudy.smf.Controller.Nsmf_PDUSession.model.SmContextUpdateData;
import com.nec.corestudy.smf.Controller.Nsmf_PDUSession.model.SmContextUpdatedData;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-06-11T17:31:20.195+09:00")

@Api(value = "sm-contexts", description = "the sm-contexts API")
public interface SmContextsApi {

    @ApiOperation(value = "Create SM Context service operation", nickname = "createSMContext", notes = "This resource represents the collection of the individual SM contexts created in the SMF.", response = SmContextCreatedData.class, tags={ "SM contexts collection", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "successful operation", response = SmContextCreatedData.class) })
    @RequestMapping(value = "/sm-contexts",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<SmContextCreatedData> createSMContext(@ApiParam(value = "Representation of the SM context to be created in the SMF" ,required=true )  @Valid @RequestBody SmContextCreateData body);


    @ApiOperation(value = "Query SM Context service operation", nickname = "querySMContext", notes = "MultipleThis method updates an individual SM context resource and/or provide N1 or N2 SM information received from the UE or the AN, for a given PDU session, towards the SMF, or in V-SMF in HR roaming scenario.", response = SmContextQueriedData.class, tags={ "Individual SM context", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SmContextQueriedData.class),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 403, message = "Forbidden", response = ProblemDetails.class) })
    @RequestMapping(value = "/sm-contexts/{smContextRef}",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.GET)
    ResponseEntity<SmContextQueriedData> querySMContext(@ApiParam(value = "SM context reference",required=true) @PathVariable("smContextRef") Long smContextRef);


    @ApiOperation(value = "Release SM Context", nickname = "releaseSMContext", notes = "This custom operation releases an individual SM context resource in the SMF, or in V-SMF in HR roaming scenario", response = SmContextReleasedData.class, tags={ "Individual SM context", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SmContextReleasedData.class),
        @ApiResponse(code = 204, message = "No Content") })
    @RequestMapping(value = "/sm-contexts/{smContextRef}/release",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<SmContextReleasedData> releaseSMContext(@ApiParam(value = "",required=true) @PathVariable("smContextRef") String smContextRef,@ApiParam(value = "Representation of the data to be sent to the SMF when releasing the SM context."  )  @Valid @RequestBody SmContextReleaseData body);


    @ApiOperation(value = "Update SM Context service operation", nickname = "updateSMContext", notes = "MultipleThis method updates an individual SM context resource and/or provide N1 or N2 SM information received from the UE or the AN, for a given PDU session, towards the SMF, or in V-SMF in HR roaming scenario.", response = SmContextUpdatedData.class, tags={ "Individual SM context", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SmContextUpdatedData.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class) })
    @RequestMapping(value = "/sm-contexts/{smContextRef}",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PATCH)
    ResponseEntity<SmContextUpdatedData> updateSMContext(@ApiParam(value = "SM context reference",required=true) @PathVariable("smContextRef") Long smContextRef,@ApiParam(value = "Representation of the updates to apply to the SM context." ,required=true )  @Valid @RequestBody SmContextUpdateData body);

}

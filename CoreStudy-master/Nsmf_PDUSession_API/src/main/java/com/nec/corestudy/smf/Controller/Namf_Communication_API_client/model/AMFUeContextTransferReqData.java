/*
 * Namf_Communication API
 * This is a AMF Server API.   [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.nec.corestudy.smf.Controller.Namf_Communication_API_client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.nec.corestudy.smf.Controller.Namf_Communication_API_client.model.AMFN1MessageContainer;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * AMFUeContextTransferReqData
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-05-22T15:58:37.428+09:00")
public class AMFUeContextTransferReqData {
  @SerializedName("reason")
  private String reason = null;

  @SerializedName("regRequest")
  private AMFN1MessageContainer regRequest = null;

  @SerializedName("supportedFeatures")
  private String supportedFeatures = null;

  public AMFUeContextTransferReqData reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * FFS
   * @return reason
  **/
  @ApiModelProperty(required = true, value = "FFS")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public AMFUeContextTransferReqData regRequest(AMFN1MessageContainer regRequest) {
    this.regRequest = regRequest;
    return this;
  }

   /**
   * Get regRequest
   * @return regRequest
  **/
  @ApiModelProperty(value = "")
  public AMFN1MessageContainer getRegRequest() {
    return regRequest;
  }

  public void setRegRequest(AMFN1MessageContainer regRequest) {
    this.regRequest = regRequest;
  }

  public AMFUeContextTransferReqData supportedFeatures(String supportedFeatures) {
    this.supportedFeatures = supportedFeatures;
    return this;
  }

   /**
   * Get supportedFeatures
   * @return supportedFeatures
  **/
  @ApiModelProperty(value = "")
  public String getSupportedFeatures() {
    return supportedFeatures;
  }

  public void setSupportedFeatures(String supportedFeatures) {
    this.supportedFeatures = supportedFeatures;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AMFUeContextTransferReqData amFUeContextTransferReqData = (AMFUeContextTransferReqData) o;
    return Objects.equals(this.reason, amFUeContextTransferReqData.reason) &&
        Objects.equals(this.regRequest, amFUeContextTransferReqData.regRequest) &&
        Objects.equals(this.supportedFeatures, amFUeContextTransferReqData.supportedFeatures);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reason, regRequest, supportedFeatures);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AMFUeContextTransferReqData {\n");
    
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    regRequest: ").append(toIndentedString(regRequest)).append("\n");
    sb.append("    supportedFeatures: ").append(toIndentedString(supportedFeatures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * Namf_Communication API
 * This is a AMF Server API.   [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.nec.corestudy.smf.Controller.Namf_Communication_API_client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * AMFAmfEventMode
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-05-22T15:58:37.428+09:00")
public class AMFAmfEventMode {
  /**
   * Gets or Sets trigger
   */
  @JsonAdapter(TriggerEnum.Adapter.class)
  public enum TriggerEnum {
    ONE_TIME("Jamf_ONE_TIME"),
    
    CONTINUOUS("Jamf_CONTINUOUS");

    private String value;

    TriggerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TriggerEnum fromValue(String text) {
      for (TriggerEnum b : TriggerEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TriggerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriggerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TriggerEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TriggerEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("trigger")
  private TriggerEnum trigger = null;

  @SerializedName("maxReports")
  private Integer maxReports = null;

  @SerializedName("duration")
  private Integer duration = null;

  public AMFAmfEventMode trigger(TriggerEnum trigger) {
    this.trigger = trigger;
    return this;
  }

   /**
   * Get trigger
   * @return trigger
  **/
  @ApiModelProperty(required = true, value = "")
  public TriggerEnum getTrigger() {
    return trigger;
  }

  public void setTrigger(TriggerEnum trigger) {
    this.trigger = trigger;
  }

  public AMFAmfEventMode maxReports(Integer maxReports) {
    this.maxReports = maxReports;
    return this;
  }

   /**
   * Get maxReports
   * @return maxReports
  **/
  @ApiModelProperty(value = "")
  public Integer getMaxReports() {
    return maxReports;
  }

  public void setMaxReports(Integer maxReports) {
    this.maxReports = maxReports;
  }

  public AMFAmfEventMode duration(Integer duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @ApiModelProperty(value = "")
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AMFAmfEventMode amFAmfEventMode = (AMFAmfEventMode) o;
    return Objects.equals(this.trigger, amFAmfEventMode.trigger) &&
        Objects.equals(this.maxReports, amFAmfEventMode.maxReports) &&
        Objects.equals(this.duration, amFAmfEventMode.duration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trigger, maxReports, duration);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AMFAmfEventMode {\n");
    
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    maxReports: ").append(toIndentedString(maxReports)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


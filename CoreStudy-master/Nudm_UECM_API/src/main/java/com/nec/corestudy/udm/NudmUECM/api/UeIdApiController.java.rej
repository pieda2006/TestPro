--- UeIdApiController.java.orig	2018-05-14 10:33:21.000000000 +0900
+++ UeIdApiController.java	2018-05-15 20:31:47.050321826 +0900
@@ -42,164 +42,345 @@
         this.request = request;
     }
 
-    public ResponseEntity<Void> deleteIndividualSmfRegistration(@ApiParam(value = "ueId. ",required=true) @PathVariable("ueId") String ueId,@ApiParam(value = "pduSessionId. ",required=true) @PathVariable("pduSessionId") String pduSessionId) {
+    String LineSep = System.getProperty("line.separator");
+
+    public ResponseEntity<Void> deleteIndividualSmfRegistration(
+            @ApiParam(value = "ueId. ",required=true)
+            @PathVariable("ueId") String ueId,
+            @ApiParam(value = "pduSessionId. ",required=true)
+            @PathVariable("pduSessionId") String pduSessionId) 
+    {
         String accept = request.getHeader("Accept");
-        return new ResponseEntity<Void>(HttpStatus.NOT_IMPLEMENTED);
+
+        log.info("deleteIndividualSmfRegistration start");
+        log.info("ueId : " + ueId );
+        log.info("pduSessionId : " + pduSessionId );
+
+        // to be added Business Logic
+
+        return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
     }
 
-    public ResponseEntity<Void> deleteSmsf3gppAccess(@ApiParam(value = "ueId. ",required=true) @PathVariable("ueId") String ueId) {
+    public ResponseEntity<Void> deleteSmsf3gppAccess(
+            @ApiParam(value = "ueId. ",required=true)
+            @PathVariable("ueId") String ueId) 
+    {
         String accept = request.getHeader("Accept");
-        return new ResponseEntity<Void>(HttpStatus.NOT_IMPLEMENTED);
+
+        log.info("deleteSmsf3gppAccess start");
+        log.info("ueId : " + ueId);
+
+        // to be added Business Logic
+
+        return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
     }
 
-    public ResponseEntity<Void> deleteSmsfNon3gppAccess(@ApiParam(value = "ueId. ",required=true) @PathVariable("ueId") String ueId) {
+    public ResponseEntity<Void> deleteSmsfNon3gppAccess(
+            @ApiParam(value = "ueId. ",required=true) 
+            @PathVariable("ueId") String ueId) 
+    {
         String accept = request.getHeader("Accept");
-        return new ResponseEntity<Void>(HttpStatus.NOT_IMPLEMENTED);
+
+        log.info("deleteSmsfNon3gppAccess start");
+        log.info("ueId : " + ueId);
+
+        // to be added Business Logic
+
+        return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
     }
 
-    public ResponseEntity<Amf3GppAccessRegistration> getAmf3gppAccess(@ApiParam(value = "ueId. ",required=true) @PathVariable("ueId") String ueId,@ApiParam(value = "") @Valid @RequestParam(value = "supportedFeatures", required = false) String supportedFeatures) {
+    public ResponseEntity<Amf3GppAccessRegistration> getAmf3gppAccess(
+            @ApiParam(value = "ueId. ",required=true) 
+            @PathVariable("ueId") String ueId,
+            @ApiParam(value = "") @Valid
+            @RequestParam(value = "supportedFeatures", required = false) String supportedFeatures) 
+    {
+
+        log.info("getAmf3gppAccess start");
+        log.info("ueId : " + ueId);
+        log.info("supportedFeatures : " + supportedFeatures);
+
         String accept = request.getHeader("Accept");
         if (accept != null && accept.contains("application/json")) {
             try {
-                return new ResponseEntity<Amf3GppAccessRegistration>(objectMapper.readValue("{  \"imsVoPS\" : { },  \"deregCallbackUri\" : { },  \"supportedFeatures\" : { },  \"purgeFlag\" : { },  \"pei\" : { },  \"amfId\" : { }}", Amf3GppAccessRegistration.class), HttpStatus.NOT_IMPLEMENTED);
+
+                // To be added Business Logic
+                return new ResponseEntity<Amf3GppAccessRegistration>(objectMapper.readValue(
+                    "{  \"imsVoPS\" : { },  \"deregCallbackUri\" : { },  \"supportedFeatures\" : { },  \"purgeFlag\" : { },  \"pei\" : { },  \"amfId\" : { }}",
+                     Amf3GppAccessRegistration.class), HttpStatus.OK);
             } catch (IOException e) {
                 log.error("Couldn't serialize response for content type application/json", e);
                 return new ResponseEntity<Amf3GppAccessRegistration>(HttpStatus.INTERNAL_SERVER_ERROR);
             }
         }
 
-        if (accept != null && accept.contains("application/xml")) {
-            try {
-                return new ResponseEntity<Amf3GppAccessRegistration>(objectMapper.readValue("<null></null>", Amf3GppAccessRegistration.class), HttpStatus.NOT_IMPLEMENTED);
-            } catch (IOException e) {
-                log.error("Couldn't serialize response for content type application/xml", e);
-                return new ResponseEntity<Amf3GppAccessRegistration>(HttpStatus.INTERNAL_SERVER_ERROR);
-            }
+//        if (accept != null && accept.contains("application/xml")) {
+//            try {
+//                return new ResponseEntity<Amf3GppAccessRegistration>(objectMapper.readValue("<null></null>", Amf3GppAccessRegistration.class), HttpStatus.NOT_IMPLEMENTED);
+//            } catch (IOException e) {
+//                log.error("Couldn't serialize response for content type application/xml", e);
+//                return new ResponseEntity<Amf3GppAccessRegistration>(HttpStatus.INTERNAL_SERVER_ERROR);
+//            }
         }
 
         return new ResponseEntity<Amf3GppAccessRegistration>(HttpStatus.NOT_IMPLEMENTED);
     }
 
-    public ResponseEntity<AmfNon3GppAccessRegistration> getAmfNon3gppAccess(@ApiParam(value = "ueId. ",required=true) @PathVariable("ueId") String ueId,@ApiParam(value = "") @Valid @RequestParam(value = "supportedFeatures", required = false) String supportedFeatures) {
+    public ResponseEntity<AmfNon3GppAccessRegistration> getAmfNon3gppAccess(
+            @ApiParam(value = "ueId. ",required=true) 
+            @PathVariable("ueId") String ueId,
+            @ApiParam(value = "") 
+            @Valid @RequestParam(value = "supportedFeatures", required = false) String supportedFeatures) 
+    {
+
+        log.info("getAmfNon3gppAccess start");
+        log.info("ueId : " + ueId);
+        log.info("supportedFeatures : " + supportedFeatures);
+
         String accept = request.getHeader("Accept");
         if (accept != null && accept.contains("application/json")) {
             try {
-                return new ResponseEntity<AmfNon3GppAccessRegistration>(objectMapper.readValue("{  \"deregCallbackUri\" : { },  \"supportedFeatures\" : { },  \"purgeFlag\" : { },  \"pei\" : { },  \"amfId\" : { }}", AmfNon3GppAccessRegistration.class), HttpStatus.NOT_IMPLEMENTED);
+
+                // To be added Business Logic
+                return new ResponseEntity<AmfNon3GppAccessRegistration>(objectMapper.readValue(
+                     "{  \"deregCallbackUri\" : { },  \"supportedFeatures\" : { },  \"purgeFlag\" : { },  \"pei\" : { },  \"amfId\" : { }}", 
+                     AmfNon3GppAccessRegistration.class), HttpStatus.OK);
             } catch (IOException e) {
                 log.error("Couldn't serialize response for content type application/json", e);
                 return new ResponseEntity<AmfNon3GppAccessRegistration>(HttpStatus.INTERNAL_SERVER_ERROR);
             }
         }
 
-        if (accept != null && accept.contains("application/xml")) {
-            try {
-                return new ResponseEntity<AmfNon3GppAccessRegistration>(objectMapper.readValue("<null></null>", AmfNon3GppAccessRegistration.class), HttpStatus.NOT_IMPLEMENTED);
-            } catch (IOException e) {
-                log.error("Couldn't serialize response for content type application/xml", e);
-                return new ResponseEntity<AmfNon3GppAccessRegistration>(HttpStatus.INTERNAL_SERVER_ERROR);
-            }
-        }
+//        if (accept != null && accept.contains("application/xml")) {
+//            try {
+//                return new ResponseEntity<AmfNon3GppAccessRegistration>(objectMapper.readValue("<null></null>", AmfNon3GppAccessRegistration.class), HttpStatus.NOT_IMPLEMENTED);
+//            } catch (IOException e) {
+//                log.error("Couldn't serialize response for content type application/xml", e);
+//                return new ResponseEntity<AmfNon3GppAccessRegistration>(HttpStatus.INTERNAL_SERVER_ERROR);
+//            }
+//        }
 
         return new ResponseEntity<AmfNon3GppAccessRegistration>(HttpStatus.NOT_IMPLEMENTED);
     }
 
-    public ResponseEntity<SmsfRegistration> getSmsf3gppAccess(@ApiParam(value = "ueId. ",required=true) @PathVariable("ueId") String ueId,@ApiParam(value = "") @Valid @RequestParam(value = "supportedFeatures", required = false) String supportedFeatures) {
+    public ResponseEntity<SmsfRegistration> getSmsf3gppAccess(
+            @ApiParam(value = "ueId. ",required=true) 
+            @PathVariable("ueId") String ueId,
+            @ApiParam(value = "") 
+            @Valid @RequestParam(value = "supportedFeatures", required = false) String supportedFeatures) 
+    {
+
+        log.info("getSmsf3gppAccess start");
+        log.info("ueId : " + ueId);
+        log.info("supportedFeatures : " + supportedFeatures);
+
         String accept = request.getHeader("Accept");
         if (accept != null && accept.contains("application/json")) {
             try {
-                return new ResponseEntity<SmsfRegistration>(objectMapper.readValue("{  \"supportedFeatures\" : { },  \"smsfId\" : { }}", SmsfRegistration.class), HttpStatus.NOT_IMPLEMENTED);
+
+                // To be added Business Logic
+                return new ResponseEntity<SmsfRegistration>(objectMapper.readValue( 
+                    "{  \"supportedFeatures\" : { },  \"smsfId\" : { }}",
+                    SmsfRegistration.class), HttpStatus.OK);
             } catch (IOException e) {
                 log.error("Couldn't serialize response for content type application/json", e);
                 return new ResponseEntity<SmsfRegistration>(HttpStatus.INTERNAL_SERVER_ERROR);
             }
         }
 
-        if (accept != null && accept.contains("application/xml")) {
-            try {
-                return new ResponseEntity<SmsfRegistration>(objectMapper.readValue("<null></null>", SmsfRegistration.class), HttpStatus.NOT_IMPLEMENTED);
-            } catch (IOException e) {
-                log.error("Couldn't serialize response for content type application/xml", e);
-                return new ResponseEntity<SmsfRegistration>(HttpStatus.INTERNAL_SERVER_ERROR);
-            }
-        }
+//        if (accept != null && accept.contains("application/xml")) {
+//            try {
+//                return new ResponseEntity<SmsfRegistration>(objectMapper.readValue("<null></null>", SmsfRegistration.class), HttpStatus.NOT_IMPLEMENTED);
+//            } catch (IOException e) {
+//                log.error("Couldn't serialize response for content type application/xml", e);
+//                return new ResponseEntity<SmsfRegistration>(HttpStatus.INTERNAL_SERVER_ERROR);
+//            }
+//        }
 
         return new ResponseEntity<SmsfRegistration>(HttpStatus.NOT_IMPLEMENTED);
     }
 
-    public ResponseEntity<SmsfRegistration> getSmsfNon3gppAccess(@ApiParam(value = "ueId. ",required=true) @PathVariable("ueId") String ueId,@ApiParam(value = "") @Valid @RequestParam(value = "supportedFeatures", required = false) String supportedFeatures) {
+    public ResponseEntity<SmsfRegistration> getSmsfNon3gppAccess(
+            @ApiParam(value = "ueId. ",required=true) 
+            @PathVariable("ueId") String ueId,
+            @ApiParam(value = "") 
+            @Valid @RequestParam(value = "supportedFeatures", required = false) String supportedFeatures) 
+    {
+
+        log.info("getSmsfNon3gppAccess start");
+        log.info("ueId : " + ueId);
+        log.info("supportedFeatures : " + supportedFeatures);
+
         String accept = request.getHeader("Accept");
         if (accept != null && accept.contains("application/json")) {
             try {
-                return new ResponseEntity<SmsfRegistration>(objectMapper.readValue("{  \"supportedFeatures\" : { },  \"smsfId\" : { }}", SmsfRegistration.class), HttpStatus.NOT_IMPLEMENTED);
+
+                // To be added Business Logic
+                return new ResponseEntity<SmsfRegistration>(objectMapper.readValue(
+                    "{  \"supportedFeatures\" : { },  \"smsfId\" : { }}",
+                    SmsfRegistration.class), HttpStatus.OK);
             } catch (IOException e) {
                 log.error("Couldn't serialize response for content type application/json", e);
                 return new ResponseEntity<SmsfRegistration>(HttpStatus.INTERNAL_SERVER_ERROR);
             }
         }
 
-        if (accept != null && accept.contains("application/xml")) {
-            try {
-                return new ResponseEntity<SmsfRegistration>(objectMapper.readValue("<null></null>", SmsfRegistration.class), HttpStatus.NOT_IMPLEMENTED);
-            } catch (IOException e) {
-                log.error("Couldn't serialize response for content type application/xml", e);
-                return new ResponseEntity<SmsfRegistration>(HttpStatus.INTERNAL_SERVER_ERROR);
-            }
-        }
+//        if (accept != null && accept.contains("application/xml")) {
+//            try {
+//                return new ResponseEntity<SmsfRegistration>(objectMapper.readValue("<null></null>", SmsfRegistration.class), HttpStatus.NOT_IMPLEMENTED);
+//            } catch (IOException e) {
+//                log.error("Couldn't serialize response for content type application/xml", e);
+//                return new ResponseEntity<SmsfRegistration>(HttpStatus.INTERNAL_SERVER_ERROR);
+//            }
+//        }
 
         return new ResponseEntity<SmsfRegistration>(HttpStatus.NOT_IMPLEMENTED);
     }
 
-    public ResponseEntity<Void> patchAmf3gppAccess(@ApiParam(value = "ueId. ",required=true) @PathVariable("ueId") String ueId,@ApiParam(value = "The AMF registration for 3GPP access is replaced with the received information" ,required=true )  @Valid @RequestBody Amf3GppAccessRegistrationModification amf3GppAccessRegistrationModification) {
+    public ResponseEntity<Void> patchAmf3gppAccess(
+            @ApiParam(value = "ueId. ",required=true)
+            @PathVariable("ueId") String ueId,
+            @ApiParam(value = "The AMF registration for 3GPP access is replaced with the received information" ,required=true )
+            @Valid @RequestBody Amf3GppAccessRegistrationModification amf3GppAccessRegistrationModification)
+    {
+        log.info("patchAmf3gppAccess start");
+        log.info("ueId : " + ueId);
+        log.info("amf3GppAccessRegistrationModification : " + LineSep + amf3GppAccessRegistrationModification.toString());
+
         String accept = request.getHeader("Accept");
-        return new ResponseEntity<Void>(HttpStatus.NOT_IMPLEMENTED);
+
+        // to be added Business Logic
+
+        return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
     }
 
-    public ResponseEntity<Void> patchAmfNon3gppAccess(@ApiParam(value = "ueId. ",required=true) @PathVariable("ueId") String ueId,@ApiParam(value = "The AMF registration for non 3GPP access is modified with the received information." ,required=true )  @Valid @RequestBody AmfNon3GppAccessRegistrationModification amfNon3GppAccessRegistrationModification) {
+    public ResponseEntity<Void> patchAmfNon3gppAccess(
+            @ApiParam(value = "ueId. ",required=true)
+            @PathVariable("ueId") String ueId,
+            @ApiParam(value = "The AMF registration for non 3GPP access is modified with the received information." ,required=true ) 
+            @Valid @RequestBody AmfNon3GppAccessRegistrationModification amfNon3GppAccessRegistrationModification) 
+    {
+
+        log.info("patchAmfNon3gppAccess start");
+        log.info("ueId : " + ueId);
+        log.info("amfNon3GppAccessRegistrationModification : " + LineSep + amfNon3GppAccessRegistrationModification.toString());
+
         String accept = request.getHeader("Accept");
-        return new ResponseEntity<Void>(HttpStatus.NOT_IMPLEMENTED);
+
+        // to be added Business Logic
+
+        return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
     }
 
-    public ResponseEntity<Void> putAmf3gppAccess(@ApiParam(value = "ueId. ",required=true) @PathVariable("ueId") String ueId,@ApiParam(value = "The AMF registration for 3GPP access is replaced with the received information" ,required=true )  @Valid @RequestBody Amf3GppAccessRegistration amf3gppAccessRegistration) {
+    public ResponseEntity<Void> putAmf3gppAccess(
+            @ApiParam(value = "ueId. ",required=true)
+            @PathVariable("ueId") String ueId,
+            @ApiParam(value = "The AMF registration for 3GPP access is replaced with the received information" ,required=true )
+            @Valid @RequestBody Amf3GppAccessRegistration amf3gppAccessRegistration)
+    {
+
+        log.info("putAmf3gppAccess start");
+        log.info("ueId : " + ueId);
+        log.info("amf3gppAccessRegistration : " + LineSep + amf3gppAccessRegistration.toString());
+
         String accept = request.getHeader("Accept");
-        return new ResponseEntity<Void>(HttpStatus.NOT_IMPLEMENTED);
+
+        // to be added Business Logic
+
+        return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
     }
 
-    public ResponseEntity<Void> putAmfNon3gppAccess(@ApiParam(value = "ueId. ",required=true) @PathVariable("ueId") String ueId,@ApiParam(value = "The AMF registration for non 3GPP access is replaced with the received information." ,required=true )  @Valid @RequestBody AmfNon3GppAccessRegistration amfNon3gppAccessRegistration) {
+    public ResponseEntity<Void> putAmfNon3gppAccess(
+            @ApiParam(value = "ueId. ",required=true) 
+            @PathVariable("ueId") String ueId,
+            @ApiParam(value = "The AMF registration for non 3GPP access is replaced with the received information." ,required=true )
+            @Valid @RequestBody AmfNon3GppAccessRegistration amfNon3gppAccessRegistration) 
+    {
+
+        log.info("putAmfNon3gppAccess start");
+        log.info("ueId : " + ueId);
+        log.info("amfNon3gppAccessRegistration : " + LineSep + amfNon3gppAccessRegistration.toString());
+
         String accept = request.getHeader("Accept");
-        return new ResponseEntity<Void>(HttpStatus.NOT_IMPLEMENTED);
+
+        // to be added Business Logic
+
+        return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
     }
 
-    public ResponseEntity<SmfRegistration> putIndividualSmfRegistration(@ApiParam(value = "ueId. ",required=true) @PathVariable("ueId") String ueId,@ApiParam(value = "pduSessionId. ",required=true) @PathVariable("pduSessionId") String pduSessionId,@ApiParam(value = "The registration that is to be created." ,required=true )  @Valid @RequestBody SmfRegistration smfRegistration) {
+    public ResponseEntity<SmfRegistration> putIndividualSmfRegistration(
+            @ApiParam(value = "ueId. ",required=true) 
+            @PathVariable("ueId") String ueId,
+            @ApiParam(value = "pduSessionId. ",required=true) 
+            @PathVariable("pduSessionId") String pduSessionId,
+            @ApiParam(value = "The registration that is to be created." ,required=true )
+            @Valid @RequestBody SmfRegistration smfRegistration) 
+    {
+
+        log.info("putIndividualSmfRegistration start");
+        log.info("ueId : " + ueId);
+        log.info("pduSessionId : " + pduSessionId);
+        log.info("smfRegistration : " + smfRegistration);
+
         String accept = request.getHeader("Accept");
+
+        // to be added Business Logic
+
         if (accept != null && accept.contains("application/json")) {
             try {
-                return new ResponseEntity<SmfRegistration>(objectMapper.readValue("{  \"smfId\" : { },  \"supportedFeatures\" : { },  \"dnn\" : { },  \"pcscfRestorationCallbackUri\" : { },  \"pduSessionId\" : { }}", SmfRegistration.class), HttpStatus.NOT_IMPLEMENTED);
+
+                // to be added Business Logic
+                return new ResponseEntity<SmfRegistration>(objectMapper.readValue(
+                    "{  \"smfId\" : { },  \"supportedFeatures\" : { },  \"dnn\" : { },  \"pcscfRestorationCallbackUri\" : { },  \"pduSessionId\" : { }}",
+                    SmfRegistration.class), HttpStatus.NO_CONTENT);
             } catch (IOException e) {
                 log.error("Couldn't serialize response for content type application/json", e);
                 return new ResponseEntity<SmfRegistration>(HttpStatus.INTERNAL_SERVER_ERROR);
             }
         }
 
-        if (accept != null && accept.contains("application/xml")) {
-            try {
-                return new ResponseEntity<SmfRegistration>(objectMapper.readValue("<null></null>", SmfRegistration.class), HttpStatus.NOT_IMPLEMENTED);
-            } catch (IOException e) {
-                log.error("Couldn't serialize response for content type application/xml", e);
-                return new ResponseEntity<SmfRegistration>(HttpStatus.INTERNAL_SERVER_ERROR);
-            }
-        }
+//        if (accept != null && accept.contains("application/xml")) {
+//            try {
+//                return new ResponseEntity<SmfRegistration>(objectMapper.readValue("<null></null>", SmfRegistration.class), HttpStatus.NOT_IMPLEMENTED);
+//            } catch (IOException e) {
+//                log.error("Couldn't serialize response for content type application/xml", e);
+//                return new ResponseEntity<SmfRegistration>(HttpStatus.INTERNAL_SERVER_ERROR);
+//            }
+//        }
 
         return new ResponseEntity<SmfRegistration>(HttpStatus.NOT_IMPLEMENTED);
     }
 
-    public ResponseEntity<Void> putSmsf3gppAccess(@ApiParam(value = "ueId. ",required=true) @PathVariable("ueId") String ueId,@ApiParam(value = "The SMSF registration for 3GPP access is created or updated with the received information." ,required=true )  @Valid @RequestBody SmsfRegistration smsfRegistration) {
+    public ResponseEntity<Void> putSmsf3gppAccess(
+            @ApiParam(value = "ueId. ",required=true)
+            @PathVariable("ueId") String ueId,
+            @ApiParam(value = "The SMSF registration for 3GPP access is created or updated with the received information." ,required=true )  
+            @Valid @RequestBody SmsfRegistration smsfRegistration)
+    {
         String accept = request.getHeader("Accept");
-        return new ResponseEntity<Void>(HttpStatus.NOT_IMPLEMENTED);
+
+        log.info("putSmsf3gppAccess start");
+        log.info("ueId : " + ueId);
+        log.info("smsfRegistration : " + LineSep + smsfRegistration.toString());
+
+        // to be added Business Logic
+        return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
     }
 
-    public ResponseEntity<Void> putSmsfNon3GppAccess(@ApiParam(value = "ueId. ",required=true) @PathVariable("ueId") String ueId,@ApiParam(value = "The SMSF registration for non 3GPP access is created or updated with the received information." ,required=true )  @Valid @RequestBody SmsfRegistration smsfRegistration) {
+    public ResponseEntity<Void> putSmsfNon3GppAccess(
+            @ApiParam(value = "ueId. ",required=true)
+            @PathVariable("ueId") String ueId,
+            @ApiParam(value = "The SMSF registration for non 3GPP access is created or updated with the received information." ,required=true ) 
+            @Valid @RequestBody SmsfRegistration smsfRegistration)
+    {
         String accept = request.getHeader("Accept");
-        return new ResponseEntity<Void>(HttpStatus.NOT_IMPLEMENTED);
+
+        log.info("putSmsfNon3GppAccess start");
+        log.info("ueId : " + ueId);
+        log.info("smsfRegistration : " + LineSep + smsfRegistration.toString());
+
+        // to be added Business Logic
+        return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
     }
 
 }

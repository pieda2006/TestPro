/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.0-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.nec.corestudy.pcf.api;

import com.nec.corestudy.pcf.model.PolicyAssociation;
import com.nec.corestudy.pcf.model.PolicyAssociationRequest;
import com.nec.corestudy.pcf.model.PolicyAssociationUpdateRequest;
import com.nec.corestudy.pcf.model.PolicyUpdate;
import com.nec.corestudy.pcf.model.ProblemDetails;


import io.swagger.annotations.*;

import org.springframework.http.ResponseEntity;

import org.springframework.validation.annotation.Validated;

import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;



import javax.validation.Valid;
import javax.validation.constraints.*;


import java.util.List;


    



@javax.annotation.Generated(value = "io.swagger.codegen.languages.java.SpringCodegen", date = "2018-07-20T19:29:12.075+09:00[Asia/Tokyo]")

@Api(value = "policies", description = "the policies API")

public interface PoliciesApi {



    @ApiOperation(value = "", nickname = "policiesPolAssoIdDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content. Resource was succesfully deleted"),
        @ApiResponse(code = 400, message = "Bad request", response = ProblemDetails.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDetails.class),
        @ApiResponse(code = 200, message = "Generic Error", response = ProblemDetails.class) })
    
    @RequestMapping(value = "/policies/{polAssoId}",
        produces = { "application/problem+json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<?> policiesPolAssoIdDelete(@ApiParam(value = "Identifier of a policy association",required=true) @PathVariable("polAssoId") String polAssoId);



    @ApiOperation(value = "", nickname = "policiesPolAssoIdGet", notes = "", response = PolicyAssociation.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK. Resource representation is returned", response = PolicyAssociation.class),
        @ApiResponse(code = 400, message = "Bad request", response = ProblemDetails.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDetails.class),
        @ApiResponse(code = 200, message = "Generic Error", response = ProblemDetails.class) })
    
    @RequestMapping(value = "/policies/{polAssoId}",
        produces = { "application/json""application/problem+json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> policiesPolAssoIdGet(@ApiParam(value = "Identifier of a policy association",required=true) @PathVariable("polAssoId") String polAssoId);



    @ApiOperation(value = "", nickname = "policiesPolAssoIdUpdatePost", notes = "", response = PolicyUpdate.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK. Updated policies are returned", response = PolicyUpdate.class),
        @ApiResponse(code = 400, message = "Bad request", response = ProblemDetails.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDetails.class),
        @ApiResponse(code = 200, message = "Generic Error", response = ProblemDetails.class) })
    
    @RequestMapping(value = "/policies/{polAssoId}/update",
        produces = { "application/json""application/problem+json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<?> policiesPolAssoIdUpdatePost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody PolicyAssociationUpdateRequest body,@ApiParam(value = "Identifier of a policy association",required=true) @PathVariable("polAssoId") String polAssoId);



    @ApiOperation(value = "", nickname = "policiesPost", notes = "", response = PolicyAssociation.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = PolicyAssociation.class),
        @ApiResponse(code = 400, message = "Bad request", response = ProblemDetails.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDetails.class),
        @ApiResponse(code = 200, message = "Generic Error", response = ProblemDetails.class) })
    
    @RequestMapping(value = "/policies",
        produces = { "application/json""application/problem+json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<?> policiesPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody PolicyAssociationRequest body);


}


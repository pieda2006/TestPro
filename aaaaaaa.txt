
### Condition
OperationType|処理内容|Parameter
---|---|---
0|等しいかチェック|***Operation***<br>結果の比較をするOperation
1|右辺が左辺より大きいかをチェック|***Operation***<br>結果の比較をするOperation
2|ResultをORで論理演算|***Operation***<br>結果を論理演算するOperation
3|ResultをAND演算子で論理演算|***Operation***<br>結果を論理演算するOperation
4|バッファから要素取得|***ParamName***<br>array(String)。取得箇所のパスを示す。<br>***ParamType***<br>0:INT,1:STRING
5|Conditionから要素取得|***ParamName***<br>array(String)。取得箇所のパスを示す。<br>***ParamType***<br>0:INT,1:STRING
6|Operationから要素取得|***ParamName***<br>array(String)。取得箇所のパスを示す。<br>***ParamType***<br>0:INT,1:STRING
7|条件付き要素取得|***ParamName***<br>array(String)。取得箇所のパスを示す。<br>***ParamType***<br>0:INT,1:STRING<br>***ParamKind***<br>0:Request , 1: Condition , 2: Operation , 3: Result<br>***CondParam***<br>取得条件の取得箇所を示す。<br>***CondType***<br>取得条件の型を示す。<br>***CondKind***<br>0:Request , 1: Condition , 2: Operation , 3: Result<br>***Depth***<br>取得対象の深さ。

### 改修内容

 - [ ] ResultInfoにJsonNodeを保持できるようにする。
 - [ ] 要素取得のEvaluateにResultInfoからの取得を追加。
 - [ ] 条件付き要素取得のEvaluateの追加。
 - [ ] ID払い出しのアクション追加。 
ID払い出しはPod名、カウンタ(プロセス内で一意)、時刻等を使用。
 - [ ] HTTPのヘッダに設定する。

```
    private JsonNode getParamJson(JsonNode findJson, int paramCount, JsonNode condition){
        JsonNode lJsonNode = null;
        JsonNode fJsonNode = null;
        String lString = null;
        Map.Entry<String,JsonNode> jsonmap = null;
        Iterator<Map.Entry<String,JsonNode>> jsonIte = null;
        
        if(paramName.has(paramCount)){
            lString = paramName.get(paramCount).asText()
            if(!lString.equals("*")){
                fJsonNode = findJson.path(lString);
                paramCount++;
                lJsonNode = getParamJson(fJsonNode,paramCount,condition);
                if(lJsonNode == null){
                    if(fJsonNode.equals(condition)){
                        return fJsonNode;
                    } else {
                        return MissingNode.getInstance();
                    }
                } else {
                    return lJsonNode;
                }
            } else {
                jsonIte = findJson.fields();
                while(jsonIte.hasNext()){
                    jsonmap = jsonIte.next();
                    fJsonNode = jsonmap.getValue();
                    lJsonNode = getParamJson(fJsonNode,paramCount,condition);
                    if(lJsonNode == null){
                        if(fJsonNode.equals(condition)){
                            return fJsonNode;
                        } else {
                            return MissingNode.getInstance();
                        }
                    } else {
                        if(!lJsonNode.isMissingNode()){
                            return lJsonNode;
                        }
                    }
                }
            }
        } else {
            return null;
        }
    }
```